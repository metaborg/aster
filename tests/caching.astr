module caching

strategies

  main-caching =
    option-wrap(
      verbose-option
    ,
      root := "root".init;
      
      <debug(!1); eq>      (root.get-cached-1, root.get-cached-1);
      <debug(!2); eq>      (root.get-cached-2, root.get-cached-2);
      <debug(!3); not(eq)> (root.get-uncached-3, root.get-uncached-3);
      <debug(!4); not(eq)> (root.get-uncached-4, root.get-uncached-4);
      <debug(!5); not(eq)> (root.get-uncached-5, root.get-uncached-5);
      <debug(!6); not(eq)> (root.get-uncached-6, root.get-uncached-6);
      <debug(!7); eq>      (root.get-cached-7, root.get-cached-7);
      <debug(!8); eq>      (root.get-cached-8, root.get-cached-8);
      <debug(!9); eq>      (root.get-cached-9(|1), root.get-cached-9(|1));
      <debug(!10); eq>     (root.get-cached-10, root.get-cached-10);
      <debug(!11); eq>     (root.get-cached-11, root.get-cached-11);
      <debug(!12); eq>     (root.get-cached-12, root.get-cached-12);
      
      root.no-premature-caching
    )

attributes
  
  def get-cached-1 = new
  
  def noop get-cached-2 = new
  
  def plain get-uncached-3 = new
  
  def uncached get-uncached-4 = new
  
  def down plain get-uncached-5 = new
  
  def down uncached get-uncached-6 = new
  
  // here, the equation result gets cached, but the decorated result does not
  def plain down get-cached-7 = new
  
  def uncached down get-cached-8 = new
  
  def get-cached-9(|arg) := (<new>, arg)
  
  def cached get-cached-10 = new
  
  def cached(|id.signature(id.get-cached-11)) get-cached-11 = new
  
  def cached(|id.signature) get-cached-12 = new
  
decorators

  decorator noop(a) = a; noop
  
strategies

  noop = id
  
attributes

  def check-uncached noop no-premature-caching = new
  
  decorator check-uncached(a) =
    a;
    not(get-cached-attribute(|id.global-cache, id, a.signature); debug(!"b"))

