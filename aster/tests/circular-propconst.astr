module circular-propconst

imports
  libstratego-lib

// Extended definition of the small toy language

signature constructors
  While  : STIRNG * Stm    -> Stm
  Block  : List(Stm)       -> Stm
  If     : Var * Stm * Stm -> Stm
  Assign : STRING * Expr   -> Stm
  Return : Var             -> Stm
  Int    : INT             -> Expr
  Var    : STRING          -> Expr
  
  NOT_CONSTANT : Expr

strategies // Set-up, testing

  main-circular-propconst =
    option-wrap(
      verbose-option
    ,
      input := <make-input>;
      oncetd(?Assign("x", _) => it);
      it.constant-before.debug
    
      // test-propconst
    )
  
  make-input =
    !Block([
       Assign("bogus1", Int(1))
     , Assign("y", Int(3))
     , Assign("x", Int(3))
     , While("x", Block([
         Assign("x", Int(4))
       , Assign("x", Var("y"))
       ]))
     , Return("x")
    ]).init
  
  test-propconst =
    topdown(
      !id{^id.constant-before}
    );
    
    debug;
    
    ?Block([
       Assign("bogus1", "value")   {          "bogus3", "value"}
     , Assign("bogus2", "bogus1")  {"bogus1", "bogus3", "value"}
     , Assign("x", "value")        {          "bogus3", "value"}
     , While("x", Block([
         Assign("x", "bogus3")     {          "bogus3", "value"}
       , Assign("x", "value")      {          "bogus3", "value"}
      ]))                          {"x",      "bogus3", "value"}
     , Return("x")                 {"x"}
     ])
  
  // is-Stm can normally be generated from the grammar, but is simply hardcoded here
  is-Stm = ?Block(_) + ?While(_, _) + ?If(_, _, _) + ?Assign(_, _) + ?Return(_)
  
  local `apply-to-stm`(s) = is-Stm; s

attributes // Control flow (also defined in circular-liveness)
  
  inh succ-enclosing: // next statement as determined by the enclosing control structures  
    root            -> []
    [s1, s2 | _].s1 -> [s2]

  `apply-to-stm` succ = id.succ-enclosing // default next statement for a particular statement
  
  eq Block([s | _]).succ := [s]
  
  eq If(e, s1, s2).succ := [s1, s2]
     
  eq While(e, s):
    id.succ          := [s | id.succ-enclosing] where verbose-msg(!"while succ:", id.succ-enclosing.uninit)
    s.succ-enclosing := [id]
  
  eq Return(e).succ := []

attributes // Reverse control flow
  
  // for each id.succ: pred = id  
  `collect-foreach-idsucc` pred = id
  
  // TODO: promote collect-foreach-idsucc to a library decorator
  //       id.succ should not be hardcoded in here, but should be a strategy argument 'targets'
  local node.`collect-foreach-idsucc`(s) =
    if not(<CompletedSurvey> s.unique-id) then
      rules(CompletedSurvey: s.unique-id);
      
      id.root;
      topdown(where(try(
        { contribution:
          ?contribution;
          id.succ; // targets
          map({ target:
            ?target;
            rules(
              CollectForeachContributions :+ (s.unique-id, target) -> contribution
            )
          })
        }
      )))
    end;
    
    <bagof-CollectForeachContributions; s> (s.unique-id, node)

attributes // Extract constant values

  // TODO: cover(|"Expr")
  local constant-value:
    id           -> NOT_CONSTANT()
    Int(i)       -> id
    Var(v)       -> id.constant-before.lookup(|v)

  // Add nodes that define new constant values
  local constant-update:
    Assign(var, e) -> [(var, e.constant-value)]

attributes // Data flow

  local stm circular []:
    id.constant-before =
      id.pred;
      map(id.constant-after);
      id.union
  
    id.constant-after =
      <id.isect> (id.constant-updates, id.constant-before)

attributes // Utility

  // union: [x,1] + [x,2] -> []
  union-tables =
    union(?((k1, v), (k2, _)); k1.eq(|k2));
    remove-duplicates;
    filter(not(NOT_CONSTANT))
  
  remove-duplicates =
    ([(key, value) | tail], table2);
    
    
    ?([(key, value) | tail], table2);
    if <remove-entry(|key)> table2 => table2' then
       ![(key, value) | <merge-tables> (tail, table2')]
    else
       <merge-tables> (tail, table2)
    end
  
  remove-entry(|key) =
    \[(key, _) | tail] -> tail\
  <+
    [id | <remove-entry(|key)>]


  local tables:
    id.table-union =
      [
       union(?((k1, _), (k2, _)))
    // id.table-isect = isect(?((k1, v), (k2, _)); k1.eq(|k2))

