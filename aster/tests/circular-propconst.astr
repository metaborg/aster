module circular-propconst

imports
  libstratego-lib

// Extended definition of the small toy language

signature constructors
  While  : STIRNG * Stm    -> Stm
  Block  : List(Stm)       -> Stm
  If     : Var * Stm * Stm -> Stm
  Assign : STRING * Expr   -> Stm
  Return : Var             -> Stm
  Int    : INT             -> Expr
  Var    : STRING          -> Expr
  
  NOT_CONSTANT : Expr

strategies // Set-up, testing

  main-circular-propconst =
    option-wrap(
      verbose-option
    ,
      input := <make-input>;
    
      test-propconst
    )
  
  make-input =
    !Block([
      Assign("x", Int(1))
    , Assign("y", Int(2))
    , Assign("x", Int(3))
    , While("cond", Block([
        Assign("x", Var("y"))
      , Assign("x", Var("x"))
      ]))
    , Return("x")
    ]).init
  
  test-propconst =
    topdown(
      !id{^id.constant-after}
    );
    
    debug;
    
    ?Block([
      Assign("x", Int(1))     {               ("x", Int(1))}
    , Assign("y", Int(2))     {("y", Int(2)), ("x", Int(1))}
    , Assign("x", Int(3))     {("y", Int(2)), ("x", Int(3))}
    , While("cond", Block([
        Assign("x", Var("y")) {("y", Int(2))               }
      , Assign("x", Var("x")) {("y", Int(2)), ("x", Int(4))}
      ]))                     {("y", Int(2))               }
    , Return("x")
    ])
  
  // is-Stm can normally be generated from the grammar, but is simply hardcoded here
  is-Stm = ?Block(_) + ?While(_, _) + ?If(_, _, _) + ?Assign(_, _) + ?Return(_)

decorators
  
  decorator apply-to-stm(a) = is-Stm; a

attributes // Control flow (also defined in circular-liveness)
  
  def down succ-enclosing: // next statement as determined by the enclosing control structures  
    root            -> []
    [s1, s2 | _].s1 -> [s2]

  def apply-to-stm succ = id.succ-enclosing // default next statement for a particular statement
  
  eq Block([s | _]).succ := [s]
  
  eq If(e, s1, s2).succ := [s1, s2]
     
  eq While(e, s):
    id.succ          := [s | s.succ-enclosing]
    s.succ-enclosing := [s]
  
  eq Return(e).succ := []

attributes // Reverse control flow
  
  // for each id.succ: pred = id  
  def contribute-to(id.succ) pred = id

attributes // Extract constant values

  // TODO: cover(|"Expr")
  def constant-value:
    Int(i)       -> id
    Var(v)       -> id.constant-before.lookup(|v)

  // TODO: default(|[])
  def Assign(var, e):
     id.constant-genset  := [(var, e.constant-value)]
     id.constant-killset := [(var, ()              )] where not(e.constant-value)

attributes // Data flow

  def down apply-to-stm circular(|[]) stm:
    id.constant-before =
      id.pred;
      map(id.constant-after);
      id.isect
  
    id.constant-after =
      id.constant-before;
      try(<id.table-union> (<stm.constant-genset>, id));
      try(<id.table-diff> (id, stm.constant-killset))

attributes // Utility

  def tables:
    id.table-union = union({?((k1, _), (k2, _)); k1.eq(|k2)})
    id.table-diff  = diff({?((k1, _), (k2, _)); k1.eq(|k2)})

