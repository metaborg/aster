module test-attributes

imports
  libstratego-lib

signature constructors
  Fork : Term * Term -> Term
  Leaf : Term        -> Term

strategies

  test-attributes =
    test-default-attributes;
    test-attribute-behavior;
    test-set-operations
    
  test-default-attributes =
    apply-and-check(
      !"id.parent (1)"
    , fetchtd(1; id.parent)
    , !Leaf(1).init
    , ?Leaf(1)
    );
    apply-and-check(
      !"id.parent (2)"
    , fetchtd(1; id.parent)
    , ![1].init
    , ?[1]
    );
    apply-and-check(
      !"id.ancestor (1)"
    , fetchtd(?1; id.ancestor(id))
    , !Fork(Leaf(1), 2).init
    , ?Leaf(1)
    );
    apply-and-check(
      !"id.ancestor (2)"
    , fetchtd(1; id.ancestor(?Fork(_, _)))
    , !Fork(Leaf(1), 2).init
    , ?Fork(_, _)
    );
    apply-and-check(
      !"id.ancestor is not proper"
    , id.ancestor(1)
    , !1
    , ?1
    )
    

strategies
  
  fetchtd(s) = oncetd(s; ?x); !x

attributes

  inh test-root = id.test-root <+ id
  
  local test-silly-circular circular 0 = !2
  
  local root.test-copy-root = id
  
  syn 1.is-one = id
  
  local Fork(a@1, 2).a.child-def = id
  
  local first-kid = one(?kid); !kid
  
  local all-kids = ?_#(<id>)
  
  local all-kids-tuple = ?_#(<id>); ListToTuple
  
  local new-fork = \_#(kids) -> "Fork2"#(kids)\
 
  test-attribute-behavior =
    apply-and-check(
      !"inherited attribute "
    , fetchtd(1; id.test-root)
    , !Fork(Leaf(1), 2).init
    , ?Fork(_, _)
    );
    apply-and-check(
      !"circular attribute initial value "
    , id.test-silly-circular
    , 1.init
    , ?2
    );
    apply-and-check(
      !"inherited"
    , fetchtd(3; id.test-copy-root)
    , !Fork(1, 3).init
    , ?Fork(1, 3)
    );
    apply-and-check(
      !"synthesized copy rule (1)"
    , id.is-one
    , !Fork(1, 3).init
    , ?1
    );
    apply-and-check(
      !"synthesized copy rule (2)"
    , id.is-one
    , !Fork(3, 1).init
    , ?1
    );
    apply-and-check(
      !"attribute to get a child node"
    , id.first-kid
    , !Fork(1, 3).init
    , ?1
    );
    apply-and-check(
      !"reference attribute"
    , id.parent
    , !Fork(1, 3).init.first-kid // first-kid is a reference, and has a parent
    , ?Fork(1, 3)
    );
    apply-and-check(
      !"reference list attribute"
    , Hd; id.parent
    , !Fork(1, 3).init.all-kids // all-kids is a list of references, not a new tree
    , ?Fork(1, 3)
    );
    apply-and-check(
      !"reference tuple attribute"
    , Thd; id.parent
    , !Fork(1, 3).init.all-kids-tuple // all-kids is a tuple of references, not a new tree
    , ?Fork(1, 3)
    );
    apply-and-check(
      !"non-reference attribute"
    , id.new-fork.first-child.parent
    , !Fork(1, 3).init
    , not(?Fork(1, 3))
    );
    apply-and-check(
      !"id refers to child, not the pattern"
    , fetchtd(1; id.child-def)
    , !Fork(1, 2).init
    , ?1
    )

  test-set-operations =
    apply-and-check(
      !"non-reference attribute"
    , id.union
    , { a := [1,2,3].init;
        b := [1,2,3].init;
        !(a,b)
      }
    , eq-ignore-annos(|[1,2,3])
    )

