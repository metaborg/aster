module test-aster-internals

imports
  libstratego-lib
  libstrc
  aster

strategies

  main-test-aster-internals =
    option-wrap(
      verbose-option
    ,
      test-suite(
        !"aster internals tests"
      ,
        test-term-depth;
        test-eq-ignore-annos;
        test-foreign-ops;
        test-equation-postprocess;
        test-ordered-union
      )
    <+
      <exit> 1 // no stacktrace
    )
  
  test-term-depth =
    apply-test(!"term-depth (1)", term-depth(|Var("v")), !Term |[ A(B(C(v))) ]|, !3);
    apply-test(!"term-depth (2)", term-depth(|Var("v")), !Term |[ A(B(C(q, D(v)))) ]|, !4);
    apply-test(!"term-depth (3)", term-depth(|Var("v")), !Term |[ (1,v) ]|, !1);
    apply-test(!"term-depth (4)", term-depth(|Var("v")), !Term |[ v ]|, !0);
    apply-test(!"term-depth (5)", term-depth(|Var("v")), !Term |[ [1,2,v,4] ]|, !3);
    apply-test(!"term-depth (6)", term-depth(|Var("v")), !Term |[ [v | b] ]|, !1);
    apply-test(!"term-depth (7)", term-depth(|Var("v")), !Term |[ [1 | v] ]|, !2);
    apply-test(!"term-depth (8)", term-depth(|Var("v")), !Term |[ [1,2 | v] ]|, !3);
    apply-test(!"term-depth (9)", term-depth(|Var("v")), !Term |[ [[v]] ]|, !2);
    apply-test(!"term-depth (10)", term-depth(|Var("v")), !Term |[ [2{v}] ]|, !1)

  test-eq-ignore-annos =
    apply-test(!"eq-ignore-annos (1)", eq-ignore-annos(|[]) <+ !"fail", ![], ![]);
    apply-test(!"eq-ignore-annos (2)", eq-ignore-annos(|[]) <+ !"fail", ![]{"@3"}, ![]{"@3"});
    apply-test(!"eq-ignore-annos (3)", eq-ignore-annos(|[]{"@3"}) <+ !"fail", ![], ![]);
    apply-test(!"eq-ignore-annos (4)", eq-ignore-annos(|[]{"@4"}) <+ !"fail", ![]{"@3"}, ![]{"@3"});
    apply-test(!"eq-ignore-annos (5)", eq-ignore-annos(|1{"@3"}) <+ !"fail", !1, !1);
    apply-test(!"eq-ignore-annos (6)", eq-ignore-annos(|1{"@4"}) <+ !"fail", !1{"@3"}, !1{"@3"});
    apply-test(!"eq-ignore-annos (7)", eq-ignore-annos(|[1]) <+ !"fail", ![], !"fail");
    apply-test(!"eq-ignore-annos (8)", eq-ignore-annos(|[]) <+ !"fail", ![1], !"fail")
  
  foreign(|decorated, safe-variables) =
    desugar-all; has-foreign-operations(|decorated, safe-variables)
  
  test-foreign-ops =
    apply-test(!"has-foreign-operations (1)",      foreign(|"",[]),     !|[ !1           ]|, id);
    apply-test(!"has-foreign-operations (2)",      foreign(|"",[]),     !|[ \_ -> 2\     ]|, id);
    apply-test(!"has-foreign-operations (3)",  not(foreign(|"",[])),    !|[ \1 -> <id>\  ]|, id);
    apply-test(!"has-foreign-operations (4)",      foreign(|"",[]),     !|[ id.gimme(|1) ]|, id);	
    apply-test(!"has-foreign-operations (5)",  not(foreign(|"",[])),    !|[ id.gimme-2   ]|, id);
    apply-test(!"has-foreign-operations (6)",  not(foreign(|"",["v"])), !|[ !v           ]|, id);
    apply-test(!"has-foreign-operations (7)",      foreign(|"",["v"]),  !|[ { !v }       ]|, id);
    apply-test(!"has-foreign-operations (8)",  not(foreign(|"",["v"])), !|[ { w: !v }    ]|, id);
    apply-test(!"has-foreign-operations (9)",      foreign(|"",["v"]),  !|[ { v: !v }    ]|, id);
    apply-test(!"has-foreign-operations (10)", not(foreign(|"v",[])),   !|[ v; v         ]|, id);
    apply-test(!"has-foreign-operations (11)",     foreign(|"v",[]),    !|[ w; w         ]|, id);
    apply-test(!"has-foreign-operations (12)", not(foreign(|"",["v"])), !|[ <min> (v, v) ]|, id);
    apply-test(!"has-foreign-operations (13)", not(foreign(|"",["v"])), !|[ id.w(|v)     ]|, id);
    apply-test(!"has-foreign-operations (14)",     foreign(|"",[]),     !|[ id.w(id)     ]|, id);
    apply-test(!"has-foreign-operations (15)", not(foreign(|"",[])),    !|[ id.child(id) ]|, id)
  
  test-ordered-union =
    apply-test(!"ordered-union (1)", ordered-union, !([1,2,3],   [4,5,6]),   [1,2,3,4,5,6] + [4,5,6,1,2,3]);
    apply-test(!"ordered-union (2)", ordered-union, !([1,2,3],   [3,4]),     [1,2,3,4]);
    apply-test(!"ordered-union (3)", ordered-union, !([3,4],     [1,2,3]),   [1,2,3,4]);
    apply-test(!"ordered-union (4)", ordered-union, !([2,1],     [4,3,2]),   [4,3,2,1]);
    apply-test(!"ordered-union (5)", ordered-union, !([2,3],     [1,2,3,4]), [1,2,3,4]);
    apply-test(!"ordered-union (6)", ordered-union, !([1,2,3,4], [2,3]),     [1,2,3,4]);
    apply-test(!"ordered-union (7)", ordered-union, !([1,2,3],   [3,2,1]),   [1,2,3]);
    apply-test(!"ordered-union (8)", ordered-union, !([3,2,1],   [1,2,3]),   [3,2,1]);
    apply-test(!"ordered-union (9)", ordered-union, !([1,1],     [2,2]),     [1,1,2,2] + [2,2,1,1])
    // apply-test(!"ordered-union (10)", ordered-union, !([1,1,2],     [2,2,1]),    not supported (duplicate decorators error))

  test-equation-postprocess =
    where(init-shared-vars);
    apply-test(!"equation-postprocess (1)", equation-postprocess-def, !|[ ?Foo(<all-parents>) ]|, ?|[ ?Foo(<!x>) ]|);
    apply-test(!"equation-postprocess (2)", equation-postprocess-def, !|[ ?Foo(<all-parents(|)>) ]|, ?|[ ?Foo(<!x>) ]|);
    apply-test(!"equation-postprocess (3)", equation-postprocess-def, !|[ all-parents(|v) ]|, ?|[ all-parents(|v) ]|)

