module decorators

strategies

  main-decorators =
    option-wrap(
      verbose-option
    ,
      ![1,2,3,[4,5,1,2,6]].init;
      !(id.collect-lt(|4), id._collect-lt(|4));

      id.debug;

      id.eq => ([1,2,3,4,1,2], _)
    )

attributes // Using library decorators
  
  /**
   * Collects all values in the tree smaller than 'i'.
   */
  def collect-all collect-lt(|i) = where(is-int; <lt> (id, i))

attributes // Using local decorators

  def children = get-arguments
  
  /**
   * Collects all values in the tree smaller than 'i'.
   */
  def _collect-all _collect-lt(|i) = where(is-int; <lt> (id, i))
  
  /**
   * Collects all nodes in the tree where the attribute can be applied.
   */
  decorator _collect-all(a) =
    let children =
      id.children
    ; map(id._collect-all(a))
    ; concat
    in if a then
         debug'(!"a");
         ![<a> | <children>]
       else
         children
       ; debug'(!"b")
       end
    end
  
  /**
   * Applies the attribute semantic rule at the root of the tree.
   */
  decorator _inh _at-root(s) = id.parent._at-root(s) <+ s

  decorator _inh(a) =
    if a.defined then
      a
    else
      id.parent; id._inh(a)
    end

