module rewrites

imports
  annotations
  hashtables
  parents

strategies

  get-rewrite-mode(|attr-cache) =
    hashtable-get(|attr-cache, "$rewrite-mode")
  <+
    !0
  
  set-rewrite-mode(|attr-cache, value) =
    hashtable-put(|attr-cache, "$rewrite-mode", value)
  
  get-rewrite-cached(|attr-cache, node) =
    hashtable-get(|attr-cache, node)

  set-rewrite-cached(|attr-cache, node, value) =
    hashtable-put(|attr-cache, node, value)

strategies

  eval-anonymous-rewrite = fail // this is a generated strategy
  
  astr-has-rewrites = fail // this is a generated strategy
  
  eval-anonymous-rewrites-cached(|all-parents, attr-cache) =
    get-rewrite-cached(|attr-cache, <id>)
  <+
    set-rewrite-cached(|attr-cache, <id>, <id>);
    eval-anonymous-rewrites-set-cached(|all-parents, attr-cache)
  
  eval-anonymous-rewrites-set-cached(|all-parents, attr-cache) =
    repeat(
      { before: ?before;
        eval-anonymous-rewrite;
        persist-anonymous-rewrite(|all-parents, attr-cache, before, <id>)
      }
    )

strategies

  // TODO: Optimize - don't reinitialize nodes if no attrs evaluated
  
  astr-initialize-node(|all-parents, attr-cache) =
    if astr-has-rewrites then
      set-rewrite-mode(|attr-cache, 1);
      do-while(
        astr-initialize-node-no-rewrite(|all-parents)
      ,
        { before:
          ?before;
          bottomup-consnil( // TODO: something like innermost-consnil?
            ( get-rewrite-cached(|attr-cache, <id>)
            <+
              set-rewrite-cached(|attr-cache, <id>, <id>)
            );
            eval-anonymous-rewrites-set-cached(|all-parents, attr-cache)
          );
          not(?before)
        }
      );
      set-rewrite-mode(|attr-cache, 0)
    else
      astr-initialize-node-no-rewrite(|all-parents)
    end
  
  /**
   * Persist a rewrite in the tree by storing it in the rewrite cache.
   * Also performs this operation for all ancestor nodes.
   */
  persist-anonymous-rewrite(|all-parents, attr-cache, from, to) =
    with(
      to'         := <astr-initialize-node(|all-parents, attr-cache)> to;
      from-parent := <get-parent(|all-parents)> from;
      to-parent   := <persist-anonymous-rewrite-upwards(|all-parents, attr-cache, from, to')>;
      <set-parent(|all-parents, to-parent)> to'
    );
    !to'
  
  persist-anonymous-rewrite-upwards(|all-parents, attr-cache, from-child, to-child):
    node -> node'
    where
      if NoParent then
        node' := node
      else
        node'       := <one((from-child -> to-child))> node;
        from-parent := <get-parent(|all-parents)> node;
        to-parent   := <persist-anonymous-rewrite-upwards(|all-parents, attr-cache, node, node')>;
        
        set-rewrite-cached(|attr-cache, from-parent, to-parent);
        <all(set-parent(|all-parents, to-parent))> to-parent;
        <set-parent(|all-parents, to-parent)> node'
      end
