module rewrites

imports
  annotations
  parents

strategies

  get-rewrite-mode(|attr-cache) =
    !attr-cache;
    hashtable-get(|"$rewrite-mode")
  <+
    !0
  
  set-rewrite-mode(|attr-cache, value) =
    where(
      !attr-cache;
      hashtable-put(|"$rewrite-mode", value)
    )
  
  get-rewrite-cached(|attr-cache, node) =
    !attr-cache;
    hashtable-get(|node)

  set-rewrite-cached(|attr-cache, node, value) =
    !attr-cache;
    hashtable-put(|node, value)

strategies

  eval-anonymous-rewrite = id // this is a generated strategy
  
  eval-anonymous-rewrites-cached(|all-parents, attr-cache) =
    get-rewrite-cached(|attr-cache, <id>)
  <+
    eval-anonymous-rewrites-set-cached(|all-parents, attr-cache, <id>)
  
  eval-anonymous-rewrites-set-cached(|all-parents, attr-cache, before) =
    persist-anonymous-rewrite(|all-parents, attr-cache, before, <id>);
    
    if ?before'; eval-anonymous-rewrite then
      eval-anonymous-rewrites-set-cached(|all-parents, attr-cache, before')
    end

strategies
  
  astr-initialize-node-apply-rewrites(|all-parents, attr-cache) =
    set-rewrite-mode(|attr-cache, 1);
    do-while(
      astr-initialize-node(|all-parents, attr-cache)
    ,
      { before:
        ?before;
        bottomup-consnil(
          try(get-rewrite-cached(|attr-cache, <id>));
          eval-anonymous-rewrites-set-cached(|all-parents, attr-cache, <id>)
        );
        not(?before)
      }
    );
    set-rewrite-mode(|attr-cache, 0)
  
  /**
   * Persist a rewrite in the tree by storing it in the rewrite cache.
   * Also performs this operation for all ancestor nodes.
   */
  persist-anonymous-rewrite(|all-parents, attr-cache, from, to) =
    <not(eq-ignore-annos(|to))> from;
    
    with(
      to'         := <astr-initialize-node(|all-parents, attr-cache)> to;
      from-parent := <get-parent(|all-parents)> from;
      to-parent   := <persist-anonymous-rewrite-upwards(|all-parents, attr-cache, from, to')>;
      set-rewrite-cached(|attr-cache, from, to')
    )
  
  persist-anonymous-rewrite-upwards(|all-parents, attr-cache, from-child, to-child) =
    if not(NoParent) then
      ?node;
      node'       := <one(\from-child -> to-child\)> node;
      from-parent := <get-parent(|all-parents)> node;
      to-parent   := <persist-anonymous-rewrite-upwards(|all-parents, attr-cache, node, node')>;
      
      set-rewrite-cached(|attr-cache, from-parent, to-parent);
      <set-parent(|all-parents, to-parent)> node;
      
      !node'
    end;
    
    set-parent(|all-parents, to-child)
