module parents

imports
  libstratego-lib

signature constructors
  Id : String -> TermId
  NoParent      : Parent
  UnknownParent : Parent

strategies

  /*
  get-parent(|attr-cache, all-parents, rewrite-mode) =
    ?key;
    !all-parents;
    hashtable-get(|key);
    if 1 := rewrite-mode then
      try(
        get-rewrite-cached(|attr-cache, <id>)
      )
    end
  */

  /**
   * Get the parent of the current term, or NoParent() for the root of a tree.
   * Fails for non-AG-annotated terms.
   */
  get-parent(|all-parents) =
    ?key;
    !all-parents;
    hashtable-get(|key)
  
  set-parent(|all-parents, value) =
    where(
      ?key;
      !all-parents;
      hashtable-put(|key, value)
    )

  get-prev-sibling(|parent) =
    ?child;
    !parent;
    if is-list then
      ?[<id> | child] // consnil semantics
    else
      get-arguments;
      rec rec(
        ?[<id>, child | _]
      <+
        ?[_ | <rec>]
      )
    end

  get-next-sibling(|parent) =
    ?child;
    !parent;
    if is-list then
      ?[child | <id>] // consnil semantics
    else
      (id < id + ?found-previous); // found-previous is not unbound
      all(
        ?child; ?found-previous
      <+
        where(!found-previous);
        ?next
      <+
        id
      );
      !next
    end
  
  get-first-child(|parent) =
    !parent;
    one(?first);
    !first
  
  get-last-child(|parent) =
    !parent;
    if is-list then
      ?[_ | <id>] // consnil semantics
    else
      <get-arguments> parent;
      last
    end

  all-parents =
    lookup-table(|"all-parents")
  
  /** @internal */
  astr-add-parent-references(|all-parents, parent) =
    ?node;
    set-parent(|all-parents, parent);
    all-consnil(
      astr-add-parent-references(|all-parents, node)
    )
