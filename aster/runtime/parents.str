module parents

imports
  libstratego-lib
  rewrites

signature constructors
  Id : String -> TermId
  NoParent      : Parent
  UnknownParent : Parent
  
  // TODO: Add a UninitializedParent node to newly produced trees?

strategies

  /**
   * Get the parent of the current term, or NoParent() for the root of a tree.
   * Fails for non-AG-annotated terms.
   */
  get-parent(|all-parents) =
    hashtable-get(|all-parents, <id>)
  
  set-parent(|all-parents, value) =
    hashtable-put(|all-parents, <id>, value)

  all-parents =
    lookup-table(|"all-parents")

strategies
  
  get-ancestor-list(|all-parents) =
    parent := <get-parent(|all-parents); not(NoParent)>;
    ![ parent | <get-ancestor-list(|all-parents)>]
  <+
    ![]

  get-prev-sibling(|parent) =
    ?child;
    !parent;
    if is-list then
      ?[<id> | child] // consnil semantics
    else
      get-arguments;
      rec rec(
        ?[<id>, child | _]
      <+
        ?[_ | <rec>]
      )
    end

  get-next-sibling(|parent) =
    ?child;
    !parent;
    if is-list then
      ?[child | <id>] // consnil semantics
    else
      (id < id + ?found-previous); // found-previous is not unbound
      all(
        ?child; ?found-previous
      <+
        where(!found-previous);
        ?next
      <+
        id
      );
      !next
    end
  
  get-first-child(|parent) =
    !parent;
    one(?first);
    !first
  
  get-last-child(|parent) =
    !parent;
    if is-list then
      ?[_ | <id>] // consnil semantics
    else
      <get-arguments> parent;
      last
    end

strategies
  
  /** @internal */
  astr-add-parent-references(|all-parents, parent) =
    ?node;
    set-parent(|all-parents, parent);
    all-consnil(
      astr-add-parent-references(|all-parents, node)
    )
