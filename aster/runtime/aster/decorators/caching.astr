/**
 * Decorators that handle custom caching and term initialization strategies.
 *
 * By default, attributes are cached and initialized as if they were
 * used the 'cached' decorator. The 'plain' decorator disables this.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module aster/decorators/caching

imports
  libstratego-lib

decorators // Enabling, disabling, and customized caching
  
  /**
   * Indicates that an attribute should not be cached.
   * but should be initialized.
   */
  decorator plain uncached(a) =
    a;
    id.ensure-init
  
  /**
   * Indicates that an attribute should be cached but not initialized.
   */
  decorator plain t.uninit(a) =
    if id.get-cached(a) => cached then
      !cached
    else
      (a <+ !EVAL_FAILED());
      id.uninit-lazy;
      t.set-cached-for(a|t)
    end

  /**
   * Indicates that an attribute should be cached for a specific signature.
   * Useful for caching attributes with a signature different from
   * a.signature, or attributes that take strategy arguments and are
   * normally not cached.
   */
  decorator plain t.cached(a|sig) =
    if id.get-cached(|sig) => cached then
      !cached
    else
      (a <+ !EVAL_FAILED());
      id.ensure-init;
      id.set-cached-for(|sig, t)
    end

  /**
   * Indicates that an attribute should be cached and initialized.
   * Note that this is the default behavior, unless overridden
   * by the 'plain' decorator.
   */
  decorator plain cached(a) =
    id.cached(a|a.signature)
  
  /**
   * Strip the argument values from an attribute signature.
   */
  def disable-warnings plain strip-arg-values:
    Attribute(name, sargs, targs) ->
    Attribute(name, <length> sargs, <length> targs)

decorators // Tree-structure independent attributes

  /**
   * Marks an attribute as context-free. Context-free attributes may
   * be evaluated and cached without regard to the particular location
   * of the node in the tree. For example, a node A in Fork(A, A) is
   * considered identical in this respect.
   *
   * This decorator might be applied to an attribute of the form:
   *
   *   def String context-free rename:
   *     name -> <newname> <conc-strings> (name, "_renamed")
   *
   * This attribute would rename strings in the tree, giving the same
   * name to identical strings regardless of their position in the tree.
   *
   * @note context-free attributes cannot use the 'parent' attribute; if this
   *       is used directly or indirectly, a compile-time error is reported.
   */
  decorator disable-warnings alter-signature(Attribute(id, id, map(id.uninit-lazy))) context-free(a) =
    id.uninit-lazy;
    a

  /**
   * Marks a the term arguments of an attribute as context-free.
   *
   * This decorator might be applied to an attribute of the form:
   *
   *   def context-free-args lookup-global lookup-by-name(|name):
   *     Decl(x, y) -> y
   */
  decorator disable-warnings alter-signature(Attribute(id, id, map(id.uninit-lazy))) context-free-args(a) =
    a
