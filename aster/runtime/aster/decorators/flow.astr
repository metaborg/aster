/**
 * Flow decorators: basic up, down, etc. value propagation.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module aster/decorators/flow

imports
  libstratego-lib
  aster/decorators/common
  aster/decorators/flow

decorators
  
  /**
   * Applies the attribute semantic rule at the root of the tree.
   */
  decorator down at-root(a) =
    if id.is-root then
      a
    else
      id.parent.at-root(a)
    end
  
  decorator down(a) =
    if a.defined then
      a
    else
      id.parent;
      id.down(a)
    end
  
  decorator up(a) =
    if a.defined then
      a
    else
      id.child(id.up(a))
    end
  
  decorator default(a|value) =
    a <+ !value
  
  decorator default(a, value) =
    a <+ value
  
  /* TODO: Sane definition of `chained`
  //       should semantic rules be applied only once per node,
  //       not also on the second traversal in the chain?
  //       better way to express this?
  
  local `chained-syn`(a) = // main chained attribute uses a and propagates upwards
    id.eval(
      a
    ,
      id.last-child; `chained-syn`(a)
    <+
      id.prev-sibling; `chained-syn`(a)
    <+
      id.parent; `chained-syn-helper`(a)
    )
  
  local `chained-syn-helper`(a) = // helper chained attribute only propagates downwards
    id.prev-sibling; `chained-syn`(a)
  <+
    id.parent; `chained-syn-helper`(a)
  
  local `chained-inh`(a) = // main chained attribute only propagates upwards
    id.last-child; `chained-inh`(a)
  <+
    id.eval(
      a
    ,
      id.prev-sibling; `chained-inh`(a)
    <+
      id.parent; `chained-inh-helper`(a)
    )
  
  local `chained-inh-helper`(a) = // helper chained attribute uses a and propagates downwards
    id.eval(
      a
    ,
      id.prev-sibling; `chained-inh`(a)
    <+
      id.parent; `chained-inh-helper`(a)
    )
  */
