/**
 * Assertion decorators.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module aster/decorators/assert

imports
  libstratego-lib
  aster/decorators/common
    
signature constructors

  List : Term -> List

strategies

  String = is-string
  
  Int = is-int
  
  Real = is-real
  
  List = is-list

decorators

  decorator assert-input(a, condition) =
    id.assert-input(a, condition |"Assertion failed")

  decorator assert-input(a, condition |message) =
    if not(condition) then
      log(|Critical(), [message, " at attribute ", a.attribute-name, " for: "], id.path);
      print-stacktrace;
      <exit> 1 
    end;
    a

  decorator assert-output(a, condition) =
    id.assert-output(a, condition |"Assertion failed")

  decorator input.assert-output(a, condition |message) =
    a;
    if not(condition) then
      prim("SSL_stacktrace_get_all_frame_names") => trace;
      log(|Critical(), [message, " at attribute ", a.attribute-name, " for ", input.path, ":"], id.uninit);
      <report-failure> trace
    end

  /*
  decorator input.assert-after(a, condition) =
    id.assert-after(a, condition |"Assertion failed")

  decorator input.assert-after(a, condition |message) =
    a;
    id.set-cached-for(a|input);
    if not(<condition> input) then
      prim("SSL_stacktrace_get_all_frame_names") => trace;
      log(|Critical(), [message, " at attribute ", a.attribute-name, " for ", input.path, ":"], id.uninit);
      <report-failure> trace
    end;
    id.set-uncached-for(a|input)
  */

decorators // Type annotations and assertions

  /**
   * Decorates an attribute with its output type.
   * An error will be reported if the attribute is not of this type.
   *
   * Example:
   *
   * def Type(String) add-suffix :
   *   s -> <concat-strings> (s, "_", s.suffix)
   */
  decorator Type(a, tout) =
    id.assert-output(a, id.has-Type(tout) |"Attribute result is not of the indicated type")

  /**
   * Decorates an attribute with its input and output type.
   * An error will be reported if the attribute is not of these types.
   *
   * Examples:
   *
   * def Type(String, String) add-suffix :
   *   s -> <concat-strings> (s, "_", s.suffix)
   *
   * def Type(id,     String) add-suffix :
   *   s -> <concat-strings> (s, "_", s.suffix)
   */
  decorator Type(a, tin, tout) =
    id.assert-input(
      id.assert-output(
        a
      , id.has-Type(tout)
      |"Attribute result is not of the indicated type"
      )
    , id.has-Type(tin)
    | "Attribute input is not of the indicated type"
    )
  
  /**
   * Decorates an attribute with the String output type.
   * An error will be reported if the attribute is not of this type.
   *
   * Example:
   *
   * def String add-suffix :
   *   s -> <concat-strings> (s, "_", s.suffix)
   */
  decorator String(a) =
    id.assert-output(a, String |"Result must be a string")

  decorator List(a) =
    id.assert-output(a, List |"Result must be a list")

  decorator List(a, t) =
    id.assert-output(a, list-loop(id.has-Type(t)) |"Result must be a list of the indicated type")

  decorator Int(a) =
    id.assert-output(a, is-int |"Result must be an int")

  /**
   * Indicates that an attribute is only used to test for a certain property.
   */
  decorator Test(a) =
    where(a)
  
  /**
   * Terminate with a fatal error if the decorated attribute results in a hard failure.
   */
  decorator fail-fatal(a) =
    id.assert-input(a, a.defined |"No attribute equation matches for input")

attributes // Type test helper

  /**
   * @internal
   */
  def plain has-Type(t) =
    where(t)
  <+
    list-loop(<t> List(<id>))
