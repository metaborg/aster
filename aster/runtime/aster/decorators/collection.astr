/**
 * Collection decorators.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module aster/decorators/collection

imports
  libstratego-lib
  aster/decorators/common
  aster/decorators/flow

decorators
  
  // TODO: Use bagof for contributes-to
  
  // TODO2: Optimize - avoid dynamic rules in contributes-to decorator?
  
  /**
   * For all nodes in the tree, collects a list of values for each of the
   * equations that can be applied to the node.
   * The values are combined using the 'conc' operator.
   *
   * If no equations can be applied to the tree,
   * an empty list is returned.
   *
   * To return multiple terms from a single equation, one may use the
   * after decorator as follows:
   *
   *   def collect-bagof after(flatten-list) all-definitions:
   *     Definitions(d*) -> d*
   */
  decorator at-root cached bagof collect-bagof(a) =
    collect-all-lists(a, conc)
  
  /**
   * For all nodes in the tree, collects a list of values for each of the
   * equations that can be applied to the node.
   * The values can be combined using the a custom union operator 'un'.
   *
   * If no equations can be applied to the tree,
   * an empty list is returned.
   */
  decorator at-root cached bagof collect-bagof(a, un) =
    collect-all-lists(a, un)
  
  /**
   * @obsolete
   */
  decorator Obsolete at-root cached collect-all(a) =
    collect-all(a, conc)
  
  /**
   * Makes a set from the result of an attribute.
   */
  decorator make-set(a) =
    a;
    make-set
  
  /**
   * Maps over a list.
   *
   * id.map(s) is cached per list, while map(s) is cached per item.
   */
  decorator map(a) =
    map(a)
  
  /**
   * Create collections by adding the attribute value to each of the nodes
   * indicated by <targets>. When evaluated for one of the target nodes,
   * an attibute decorated with this decorator will return all
   * values contributed to it by other nodes.
   *
   * @param targets  The nodes to contribute this attribute value to.
   */
  decorator contributes-to(a, targets) =
    id.contributes-to(a, targets, id)
  
  /**
   * Create collections by adding the attribute value to each of the nodes
   * indicated by <targets>, using <target-to-key> to transform the
   * targets to a custom collection table key.
   *
   * @param targets        The nodes to contribute this attribute value to.
   * @param target-to-key  A tranformation to apply to each target.
   *                       For example, 'id.uninit' disregards the unique
   *                       identity of a node in the tree.
   */
  decorator contributes-to(a, targets, target-to-key) =
    node := id;
    
    if not(<CompletedSurvey> a.signature) then
      <contributes-to-survey(targets, target-to-key |a.signature)> id.root
    end;
    
    <bagof-Contributions> (a.signature, <target-to-key> node);
    
    filter(
      // UNDONE: contributes-to sanity check
      //         too restrictive since a.defined currently takes where clauses into account
      // if a.defined then
        a
      // else
      //   fatal-err(|["Internal error in attribute '", a.attribute-name, "': ",
      //               "equation does not match targets definition"])
      // end
    )

strategies

  /**
   * Survey phase of the 'contributes-to' collection decorator.
   *
   * @internal
   */
  contributes-to-survey(targets, target-to-key |sig) =
    rules(CompletedSurvey: sig);
    
    topdown-consnil(where(try(
      { contribution:
        ?contribution;
        targets;
        (is-list <+ ![<id>]);
        map({ target:
          target-to-key => target;
          rules(
            Contributions :+ (sig, target) -> contribution
          )
        })
      }
    )))
  
  /**
   * A collect-all variant for a strategy <s> that returns a list of results.
   */
  collect-all-lists(s, un) =
    rec x(
      <un> (<s>, <crush(![], un,x)>)
      <+ crush(![], un,x)
    )

