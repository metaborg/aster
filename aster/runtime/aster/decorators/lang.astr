/**
 * Built-in decorators with special capabilities
 * and derived, regular decorators.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module aster/decorators/common

decorators // Internally defined marker decorators
  
  /**
   * Plain attributes do not have the default behavior of
   * caching and re-annotating a result term for re-attribution
   */
  decorator plain plain(a) =
    a

  /**
   * Indicates that an attribute can be used
   * on uninitialized terms, and that no warnings
   * should be displayed about this.
   */
  decorator disable-trace disable-warnings(a) =
    a
  
  /**
   * Indicates that an attribute should not be included in tracing messages.
   *
   * @note This should be used sparingly, e.g. to prevent loops or
   *       to hide trivial tree access attributes.
   */
  decorator disable-trace(a) =
    a

decorators // Derived decorators
  
  /**
   * Indicates that an attribute should not be cached.
   * but should be initialized.
   */
  decorator plain uncached(a) =
    a;
    id.ensure-init
  
  /**
   * Indicates that an attribute should be cached but not initialized.
   */
  decorator plain t.uninit(a) =
    if get-cached-attribute(|id.global-cache, t, a.signature) then
      not(EVAL_FAILED)
    else
      (a <+ !EVAL_FAILED());
      id.uninit;
      set-cached-attribute(|id.global-cache, t, a.signature, id);
      not(EVAL_FAILED)
    end

  /**
   * Indicates that an attribute should be cached for a specific signature.
   * Useful for caching attributes with a signature different from
   * a.signature, or attributes that take strategy arguments and are
   * normally not cached.
   */
  decorator plain cached(a|sig) =
    if get-cached-attribute(|id.global-cache, id, sig) then
      not(EVAL_FAILED)
    else
      (a <+ !EVAL_FAILED());
      id.ensure-init;
      set-cached-attribute(|id.global-cache, id, sig, id);
      not(EVAL_FAILED)
    end
  
  /**
   * Strip the argument values from an attribute signature.
   */
  def disable-warnings plain strip-arg-values:
    Attribute(name, sargs, targs) -> Attribute(name, <length> sargs, <length> targs)

