/**
 * Aster runtime: parent references.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 *
 * @internal
 */
module aster/lang/parents

imports
  libstratego-lib
  aster/lang/rewrites

signature constructors
  Id : String -> TermId
  NoParent      : Parent
  UnknownParent : Parent
  
  // TODO: Add a UninitializedParent node to newly produced trees?

strategies

  /**
   * Get the parent of the current term, or NoParent() for the root of a tree.
   * Fails for non-AG-annotated terms.
   */
  get-parent(|all-parents) =
    hashtable-get(|all-parents, <id>)
  
  set-parent(|all-parents, value) =
    hashtable-put(|all-parents, <id>, value)

  all-parents =
    lookup-table(|"all-parents")

strategies

  get-prev-sibling(|parent) =
    ?child;
    !parent;
    if is-list then
      ?[<id> | child] // consnil semantics
    else
      get-arguments;
      rec rec(
        ?[<id>, child | _]
      <+
        ?[_ | <rec>]
      )
    end

  get-next-sibling(|parent) =
    ?child;
    !parent;
    if is-list then
      ?[child | <id>] // consnil semantics
    else
      (id < id + ?found-previous); // found-previous is not unbound
      all(
        ?child; ?found-previous
      <+
        where(!found-previous); // start at the current term
        ?next
      <+
        id
      );
      !next
    end
  
  get-prev-sibling(pattern|parent) =
    ?child;
    !parent;
    if is-list then
      ?[<pattern> | child] // consnil semantics
    else
      get-arguments;
      split-at(?child) => (<id>, _);
      getlast(pattern)
    end
  
  getlast(s) =
    ?[_ | <getlast(s)>]
  <+
    ?[<s> | _]
  
  get-next-sibling(pattern|parent) =
    ?child;
    !parent;
    if is-list then
      ?[child | <pattern>] // consnil semantics
    else
      (id < id + ?found-self; ?next); // not unbound
      all(
        ?child; ?found-self
      <+
        where(!found-self); // start at the current term
        not(!next);
        pattern => next
      <+
        id
      );
      !next
    end
  
  get-first-child(|parent) =
    !parent;
    one(?first);
    !first
  
  get-last-child(|parent) =
    !parent;
    if is-list then
      ?[_ | <id>] // consnil semantics
    else
      <get-arguments> parent;
      last
    end

strategies
  
  /** @internal */
  aster-add-parent-references(|all-parents, parent) =
    ?node;
    set-parent(|all-parents, parent);
    all-consnil(
      aster-add-parent-references(|all-parents, node)
    )

  /** @internal */
  truncate-path-lists =
    // "[].[].[]." becomes "[].."
    ?['[', ']', '.' | <id>];
    repeat1(?['[', ']', '.' | <id>]);
    !['[', ']', '.', '.' | <truncate-path-lists>]
  <+
    [id | truncate-path-lists]
  <+
    []
    
