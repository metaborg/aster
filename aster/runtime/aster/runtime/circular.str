/**
 * Circular attribute evaluation run-time.
 * Uses the attribute cache table to store a worklist.
 *
 * @internal
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module aster/runtime/circular

imports
  libstratego-lib
  aster/runtime/hashtables

signature constructors
  CIRCULAR_FINISHED : Term -> Term
  CIRCULAR_BUSY     : Term -> Term

strategies

  // TODO: Start a new fixpoint for a new strongly connected component? (helps performance and prevents premature caching)
  //       or could we give an error for attributes apply premature caching during circular fixpoint?

  
  /**
   * Uncached evaluator for use in fixpoint loop.
   *
   * @returns The initialized value produced by the semantic function, or EVAL_FAILED.
   */
  recompute-circular-def(s|sig, old-value) =
    with(
      ?node;
      global-cache := <attr-cache>
    );
    
    set-last-value(|global-cache, node, sig, CIRCULAR_BUSY(old-value));
    
    (s <+ !EVAL_FAILED());
    
    if eq-ignore-annos(|old-value) then
      // verbose-msg(!"  [circ.] No change @", <strip-annos> node, !"with", strip-annos);
      circular-add-participant(|global-cache, node, sig, old-value);
      set-last-value(|global-cache, node, sig, <id>) // remove CIRCULAR_BUSY
    else
      // verbose-msg(!"  [circ.] Changed @", <strip-annos> node, !"with", strip-annos, !"was", <strip-annos> old-value);
      aster-initialize-attribute-value(|<all-parents>, global-cache);
      circular-set-has-changed(|global-cache);
      set-last-value(|global-cache, node, sig, <id>)
    end
  
  circular-fixpoint(s|sig, old-value) =
    with(
      ?node;
      global-cache := <attr-cache>
    );
    
    if is-fixpoint-running(|global-cache) then
      recompute-circular-def(s|sig, old-value)
    else
      set-fixpoint-running(|global-cache);
      recompute-circular-def(s|sig, old-value);
      
      while(circular-get-remove-has-changed(|global-cache),
        { old-value: ?old-value;
          circular-reset-participants(|global-cache);
          <recompute-circular-def(s|sig, old-value)> node
        }
      );
      circular-mark-participants-finished(|global-cache);
      unset-fixpoint-running(|global-cache)
    end

strategies // Helpers
  
  is-fixpoint-running(|global-cache) = hashtable-get(|global-cache, "$circular-lock")
  
  set-fixpoint-running(|global-cache) = hashtable-put(|global-cache, "$circular-lock", ())
  
  unset-fixpoint-running(|global-cache) = hashtable-remove(|global-cache, "$circular-lock")
  
  get-last-value(|global-cache, node, sig) =
    get-cached-attribute(|global-cache, node, sig)
  
  set-last-value(|global-cache, node, sig, value) =
    set-cached-attribute(|global-cache, node, sig, value)

strategies // Maintain a list of attributes participating in the latest fixpoint network

  // We maintain a set of all unchanged attributes in the last evaluation;
  // _only_ these will surely reach fixpoint once the iteration is complete.
  circular-add-participant(|global-cache, node, sig, value) =
    with(
      ( hashtable-get(|global-cache, "$circular-unchanged")
      <+
        new-iset;
        hashtable-put(|global-cache, "$circular-unchanged", <new-iset>)
      );
      iset-add(|(node, sig, value))
    )
  
  circular-mark-participants-finished(|global-cache) =
    with(
      hashtable-get(|global-cache, "$circular-unchanged") => set;
      iset-elements;
      
      list-loop(
        { node, sig, value:
          ?(node, sig, value);
          set-last-value(|global-cache, node, sig, CIRCULAR_FINISHED(value))
        }
      );
      
      <iset-clear> set
    )

  circular-reset-participants(|global-cache) =
    with(try(
      hashtable-get(|global-cache, "$circular-unchanged");
      iset-clear
    ))

strategies // Fixpoint keeps running while something changed
  
  circular-set-has-changed(|global-cache) =
    hashtable-put(|global-cache, "$circular-changed", ())
  
  circular-get-remove-has-changed(|global-cache) =
    where(hashtable-get(|global-cache, "$circular-changed"));
    hashtable-remove(|global-cache, "$circular-changed")
