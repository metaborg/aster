module Stratego-Attributes

imports
  Stratego-Sugar
  StrategoMix[Plain]

hiddens
  context-free start-symbols Module

exports
  sorts
    AttributeType
    OptAttributeType
    Pattern
    Attribute
    AttributeRef
    AttributeDef
    AttributeDefBlock
    AttributeKeyword
    AttributeName
    AnonymousRewrite
    AnonymousRewriteCall
    ChildIdentifierDot
    DotChildIdentifier
    AttributePatternValue
    AttributeNameValue
    AttributeTypeNameValue
    Plain
    Where
  
  context-free syntax %% attributes
    
    %% TODO: Strategy arguments
    AttributeName "(" "|" { Term "," }* ")" -> Attribute {cons("Attribute")}
    AttributeName                           -> Attribute {cons("AttributeNoArgs")}

    Id               -> AttributeName
    AttributeKeyword -> AttributeName {reject}

    Term   "." Attribute -> AttributeRef {cons("AttributeRef")}
    "id"   "." Attribute -> AttributeRef {cons("AttributeRefSelf"), prefer}
    
    %% TODO: AttributeRefLHS?
    
    AttributeRef -> Strategy {prefer}
    AttributeRef -> Term {cons("AttributeTerm")}

  context-free syntax %% Semantic rules: core syntax

    %% TODO: Reintroduce declaration syntax, but avoid ambiguity with 'as' operator

    "@" OptAttributeType Pattern "." AttributeNameValue -> AttributeDef {cons("AttributeDef")}

    ChildIdentifierDot? Attribute "="  Strategy -> AttributeNameValue {cons("AttributeDefStrategy")}
 
    "syn"     -> AttributeType {cons("Syn")}
    "inh"     -> AttributeType {cons("Inh")}
    "local"   -> AttributeType {cons("Local")}
    "chained" -> AttributeType {cons("Chained")}
%%  "eq"      -> AttributeType {cons("NoType")}

    AttributeType  -> OptAttributeType
                   -> OptAttributeType {cons("NoType")}
                   
    Id "."     -> ChildIdentifierDot {cons("Child")}
    "." Id     -> DotChildIdentifier {cons("DotChild")}
    "root" "." -> ChildIdentifierDot {reject}
    "." "root" -> DotChildIdentifier {reject}

    %% Patterns are terms without attribute references
    Term[[Plain]]    -> Pattern
    "root"           -> Pattern {cons("Root"), prefer}
    AttributeKeyword -> Pattern {reject}
    AttributeKeyword -> Var {reject} %% disambiguate
    
    "syn"     -> AttributeKeyword
    "inh"     -> AttributeKeyword
    "local"   -> AttributeKeyword
    "chained" -> AttributeKeyword

  context-free syntax %% semantic rules: syntactic sugar
  
    %% TODO: += syntax for `bagof' like definitions (e.g., for errors)
 
    "attributes" Def* -> Decl {cons("Attributes")}    
    AttributeDef      -> Def
    AttributeDefBlock -> Def

    "@" OptAttributeType AttributeNameValue -> AttributeDef {cons("AttributeDefNoPattern")}
    
    %% Grouping attributes
    "@" Pattern                    ":" AttributeTypeNameValue* -> AttributeDefBlock {cons("NameDefBlock")}
    "@" OptAttributeType Attribute ":" AttributePatternValue*  -> AttributeDefBlock {cons("PatternDefBlock")}
    
    OptAttributeType AttributeNameValue -> AttributeTypeNameValue {cons("AttributeTypedDef")}
    
    ChildIdentifierDot? Attribute ":=" Term       -> AttributeNameValue {cons("AttributeDefTermNoWhere")}
    ChildIdentifierDot? Attribute ":=" Term Where -> AttributeNameValue {cons("AttributeDefTerm")}

    Pattern DotChildIdentifier? "->" Term       -> AttributePatternValue {cons("AttributePDefTermNoWhere")}
    Pattern DotChildIdentifier? "->" Term Where -> AttributePatternValue {cons("AttributePDefTerm")}
    Pattern DotChildIdentifier? "="  Strategy   -> AttributePatternValue {cons("AttributePDefStrategy")}

    "where" Strategy                 -> Where {cons("WhereClause")}
    "with" Strategy                  -> Where {cons("WithClause")}
    "where" Strategy "with" Strategy -> Where {cons("WhereWithClause")}

  context-free syntax %% Anonymous rewrites
    
    "::" "->" Term                  -> AttributeDef {cons("BlockAnonymousRewriteRuleNoWhere")}
    "::" "->" Term "where" Strategy -> AttributeDef {cons("BlockAnonymousRewriteRule")}
    "::" "=" Strategy               -> AttributeDef {cons("BlockAnonymousRewriteStrategy")}
                 
    "::" Pattern "->" Term -> AnonymousRewrite {cons("AnonymousRewriteRuleNoWhere")}  
    "::" Pattern "->" Term
         "where" Strategy  -> AnonymousRewrite {cons("AnonymousRewriteRule")}
  
    "::" "=" Strategy                     -> AnonymousRewrite {cons("AnonymousRewriteStrategy")}
  
    "::" -> AnonymousRewriteCall {cons("AnonymousRewriteCall")}
      
    AnonymousRewrite     -> Def
    AnonymousRewriteCall -> Strategy
  
  context-free syntax %% Misc.
  
    "id" -> Term {cons("IdTerm")}
 
    %% Id "(" { Id "," }+ ")" -> TermPrototype
    %% Id                     -> TermPrototype
    %% 
    %% "extend" TermPrototype ":" { TermPrototype }+ -> ExtendId
    %%
    %% "rewrite" RuleType { Attribute "+" }+ "->" AttributeRule
    %% Term(...) -> 
   