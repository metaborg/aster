/**
 * Aster decorator reference assimilation.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module decorator-references

imports
  libstratego-lib
  front/analyze
  back/attribute-references
  back/decorator-wrapping
  
rules // Decorator references
      
  assimilate-decorator-ref:
    Strategy |[ t.x_name(s_decorated, s*|t*) ]| ->
    |[ let x_cached =
         // Can't assume caching here, and is likely already performed inside
         s_eval
       in
         !t; x_cached
       end
    ]|
    with
      ?AttributeRef(_, attr)
    where
      <is-decorator> attr
    with
      x_cached     := <CachedVar>; // not actually cached
      s_decorated' := <try(add-argument-vars)> s_decorated;
      t_decorated  := <try-to-attribute-signature-term> s_decorated';
      s_eval       := <make-decorated(|t_decorated)> (Decorator(x_name, s*, t*), s_decorated')

  try-to-attribute-signature-term =
    to-attribute-signature-term
  <+
    !Term |[ Anonymous() ]|
  
  // Recursive decorator reference
  assimilate-decorator-self-ref(|x_decorated, x_decorator, s_arg*, t_arg*):
    Strategy |[ t.x_decorator(x_decorated(|), s_arg* |t_arg*) ]| ->
    Strategy |[ <x_cached> t ]|
    with
      x_cached := <CachedVar>
