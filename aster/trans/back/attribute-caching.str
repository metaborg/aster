/**
 * Attribute memoization.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module back/attribute-caching

imports
  libstratego-lib
  back/util

rules

  add-cached-rule-logic(|def):
    |[ x_eval(sa*|a*) =
         s_rewrite => x_node;
         s_body
    ]| ->
    |[ x_eval(sa*|a*) =
         s_cache-read
         < not(EVAL_FAILED)
         + s_rewrite => x_node;
           (s_body <+ !EVAL_FAILED());
           
           if EVAL_FAILED then
             s_cache-write;
             fail
           else
             aster-initialize-attribute-value(|x_all-parents, x_global-cache);
             s_cache-write
           end
    ]|
    where
      ([], a*) := <RuleParams> def; // no strategy args
      not(has-plain-decorator);
      <has-foreign-operations> def
    with
      ([], t*)        := <params-to-vars> ([], a*);
      s_cache-read    := <add-cache-read(|t*)> def;
      s_cache-write   := <add-cache-write(|t*)> def;
      x_all-parents   := <AllParentsVar>;
      x_global-cache  := <GlobalCacheVar>
  
  add-uncached-rule-logic:
    |[ x_eval(sa*|a*) = s ]| ->
    |[ x_eval(sa*|a*) =
         s;
         not(EVAL_FAILED);
         s_init
    ]|
    with
      if has-plain-decorator + not(has-foreign-operations) then
        s_init := Id()
      else
        x_all-parents  := <AllParentsVar>;
        x_global-cache := <GlobalCacheVar>;
        s_init := |[ aster-initialize-attribute-value(|x_all-parents, x_global-cache) ]|
      end

strategies

  add-cache-read(|sargs, targs) =
    if [] := sargs then
      add-cache-read(|targs)
    else
      !Fail()
    end

  add-cache-write(|sargs, targs) =
    if [] := sargs then
      add-cache-write(|targs)
    else
      !Id()
    end
  
  add-cache-read(|targs):
    def ->
    |[ get-cached-attribute(|x_global-cache, <id>, t_key) ]|
    with
      x_all-parents   := <AllParentsVar>;
      x_global-cache  := <GlobalCacheVar>;
      t_key           := <make-cache-key(|targs)> def

  add-cache-write(|targs):
    def ->
    |[ set-cached-attribute(|x_global-cache, x_node, t_key, <id>) ]|
    with
      x_global-cache  := <GlobalCacheVar>;
      x_node          := <NodeVar>;
      t_key           := <make-cache-key(|targs)> def

  make-cache-key(|targs):
    Attribute(name, sarity, tarity) -> key
    with
      arity' := <arity-to-string> (sarity, tarity);
      name'  := <conc-strings> (name, arity');
      targs' := <drop(|DEFAULT_ARG_COUNT())> targs;
      
      !NoAnnoList(Str(name'));
      if not([] := targs') then
        !NoAnnoList(Tuple([<id> | targs']))
      end => key
