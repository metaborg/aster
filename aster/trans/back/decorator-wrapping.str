/**
 * Aster decorator wrapping.
 * Wraps decorator calls around attribute definitions.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module decorator-wrapping

imports
  libstratego-lib
  front/analyze
  back/attribute-references
  back/decorator-definitions

rules // Adding decoration logic to decorated rules

  add-decorated-rule-logic(|def):
    |[ x_eval(sa*|a*) =
         s_rewrite => x_node;
         s_body
    ]| ->
    |[ x_eval(sa*|a*) =
         s_rewrite => x_node;
         where(s_init-args);
         s_body'
    ]|
    with
      <get-attribute-decorators> def => ds
    where
      // UNDONE: having a 'plain' decorator made _everything_ uncached
      //         filter(not(PLAIN_DECORATOR => is-caching-disabled)) => ds;
      
      !ds => [_ | _]
    with
      (s*, t*)    := <params-to-vars> (sa*, a*);
      s_init-args := <decorator-init-args; fold-seq> a*;
      t_decorated := <decorated-signature(|s*, t*)> def;
      
      let is-caching-disabled =
        ?once;                            // only affect the inner attribute evaluation;
        <not(has-foreign-operations)> def // disable caching if not required by the equations
      in
          attribute-signature-wrap(
            s_body' :=
              <try(add-ensure-init(|def));
               fold-decorated-with-caching(is-caching-disabled|ds, def, s*, t*)> s_body
          | t_decorated
          )
      end
  
  /**
   * Handling of attribute term/pattern arguments used by decorators.
   */  
  decorator-init-args:
    a* -> set-param*
    with
      // Ignore standard attribute and decorator parameters
      <drop(|DEFAULT_ARG_COUNT())> a*;
      filter(not(param-to-var; extract-arg-pattern-ignore));
      
      // TODO2: Optimize - only add arg initialization if used
      map({
        Var(x_param) := <param-to-var>;
        t_user-param := <MatchingUserParam> x_param;
        !|[ t_user-param := x_param ]|
      }) => set-param*

  /**
   * Adds strategy calls to the end of an attribute definition
   * to ensure the resulting term is initialized.
   */
  add-ensure-init(|def):
    s ->
    |[ s; (EVAL_FAILED <+ aster-init-node-ensure(|x_all-parents, x_global-cache)) ]|
    where
      not(<has-plain-decorator <+ has-foreign-operations> def)
    with
      x_all-parents  := <AllParentsVar>;
      x_global-cache := <GlobalCacheVar>
    
  fold-decorated-with-caching(is-caching-disabled|decorators, def, s*, t*) =
    ?s_body;
    !decorators;
    foldr(
      !s_body
    , let
        set-caching-disabled = try(?is-caching-disabled)
        is-caching-disabled' = where(!is-caching-disabled) + is-caching-disabled
      in
        make-decorated-ignore-markers;
        set-caching-disabled
      <+
        make-decorated-with-caching(set-caching-disabled, is-caching-disabled' |def, s*, t*);
        topdown(try(assimilate-expr-inside-ag));
        rename-cached-var
      end
    )
  
  /**
   * Avoids directly generating code for marker decorator (e.g., 'plain').
   */
  make-decorated-ignore-markers:
    (marker, s_decorated) -> s_decorated
    where
      <is-native-decorator> marker
   
  /**
   * Creates a decorated attribute body, taking caching into consideration.
   *
   * @param set-caching-disabled  If invoked, caching is disabled from this decorator on
   * @param is-caching-disabled   Checks if caching is disabled through success/failure
   */
  make-decorated-with-caching(set-caching-disabled, is-caching-disabled|def, s*, t*):
    (decorator, s_decorated) ->
    |[ let x_cached =
         s_cache-read // note: this could be EVAL_FAILED
       < not(EVAL_FAILED)
       + { x_cached-node: ?x_cached-node;
           s_ref;
           s_cache-write;
           not(EVAL_FAILED)
         }
       in
         x_cached
       end
    ]|
    with
      x_cached      := <CachedVar>;
      x_cached-node := <newname> "cached-node";
      t_decorated   := <decorated-signature(|s*, t*)> def;

      if is-caching-disabled <+ <has-plain-decorator> decorator then
        set-caching-disabled;
        s_cache-read  := Fail();
        s_cache-write := Id();
        s_decorated'  := s_decorated // don't disable inner caching
      else
        {| NodeVar:
          rules(NodeVar := x_cached-node);
          s_cache-read  := <add-cache-read(|s*, t*)> def;
          s_cache-write := <add-cache-write(|s*, t*)> def
        |};
        s_decorated'  := <avoid-caching-undecorated-values> s_decorated
      end;
      
      s_ref-sugar  := <make-decorated(|t_decorated)> (decorator, s_decorated');
      s_ref        := <try(remove-eval-failed)> <assimilate-expr-inside-ag> s_ref-sugar

  /**
   * Removes global cache-writes from inner decorator applications.
   * This avoids a potential problem with attributes that have 
   * stacked decorators, each using a shared caching table.
   * (Alternatively, they could use separate caching tables.)
   */
  avoid-caching-undecorated-values =
    alltd(
      \|[ set-cached-attribute(|~_, ~_, ~_, ~_) ]| -> Id()\
    )
  
  /**
   * Creates a decorated attribute body.
   *
   * @see make-decorated-with-caching
   */
  make-decorated(|t_decorated-signature):
    (Decorator(x_decorator, s*, t*), s_decorated) ->
    Strat |[
      <id>.x_decorator'(x_cached, s_decorated, s* |t_decorated-signature', t*)
    ]|
    with
      sig          := <Fst; attribute-signature>;
      x_cached     := <CachedVar>;
      x_decorator' := <DecoratorAccessorName> x_decorator;
      if <find-signature-attribute-use> sig then
        t_decorated-signature' := t_decorated-signature
      else
        t_decorated-signature' := Term |[ Anonymous() ]|
      end

strategies // Reflective data helpers
 
  to-attribute-signature-term =
    try(?Scope(_, <id>));
    try(?AttributeRef(_, <id>));
    attribute-to-attribute-signature-term
  <+
    DecoratedAttributeSignature
  <+
    Var(id)
  <+
    !Term |[ Anonymous() ]|
  
  /** @internal */
  attribute-to-attribute-signature-term:
    Attribute(x_name, sa*, a*) ->
    <try(apply-alter-signature-decorator(|def))> Term |[
      Attribute(~str:x_name, [~*sargs], [~*targs])
    ]|
    with
      def := <attribute-signature>
    where
      // Formal parameters
      targs := <params-to-vars> a*;
      sargs := <params-to-string-terms> sa*
    <+
      // Arguments (these appear as local variables, set first to construct the signature)
      targs := <map(attribute-var-to-arg <+ Var(id))> a*;
      sargs := <map(!Term |[ Anonymous() ]|)> sa*

  /**
   * Determines the signature argument of a decorator call,
   * for use with the id.signature attribute.
   */
  decorated-signature(|s*, t*):
    Attribute(x_decorated, _, _) -> t_decorated
    with
      def := <attribute-signature>;
      if <IsDecoratorAccessorName> x_decorated then
        !Var(<SignatureVar>);
        try(apply-alter-signature-decorator(|def))
      else
        <to-attribute-signature-term> Attribute(x_decorated, s*, <drop(|DEFAULT_ARG_COUNT())> t*)
      end;
      ?t_decorated

  /**
   * Applies the built-in alter-signature decorator to a term
   * representing an attribute signature. The resulting
   * term is locally cached, while allowing its uses to be
   * evaluated as desired and in any order.
   */
  apply-alter-signature-decorator(|def):
    t_signature ->
    |[ < (id < id + ?x_altered);
         !x_altered
       <+
         !t_signature; s_alter => x_altered>
    ]|
    where
      <get-marker-decorator(
         ALTER_SIGNATURE_DECORATOR(?s_alter)
       | ALTER_SIGNATURE_DECORATOR(())
       )> def
    with
      x_altered := <AlteredSignatureVar>

strategies // General helpers
  
  /**
   * Provide new cache vars for each decorator application.
   *
   * For stacked decorations, a new cache variable name must be used
   * for each decorator application.
   */
  rename-cached-var =
    with(
      old-name := <CachedVar>;
      new-name := <newname>
    );
    alltd((old-name -> new-name))
