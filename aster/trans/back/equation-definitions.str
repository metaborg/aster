/**
 * Aster atttribute equation definition assimilation.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module back/equation-definitions

imports
  Stratego-Attributes
  aster
  back/util
  back/equation-merging
  back/attribute-builtins
  back/attribute-references
  back/decorator-definitions
  back/decorator-wrapping

overlays

  DEFAULT_ARG_COUNT = 4

strategies

  // TODO: Reconsider hard failure for attribute strategies
  //       id.ancestor(p) = p <+ id.ancestor(p) isn't nice to write,
  //       but it's consistent with the := operator

  // TODO2: runtime check for anotated terms used for/by dynamic rules
  
  default-params =
    with(
      x_parent       := <ParentVar>;
      x_all-parents  := <AllParentsVar>;
      x_global-cache := <GlobalCacheVar>;
      x_rewrite-mode := <RewriteModeVar>
    );
    
    !Typedid* |[ x_parent, x_all-parents, x_global-cache, x_rewrite-mode ]|
  
  default-args =
    default-params;
    params-to-vars

  assimilate-def:
    ADef(
      Type(type, decorators, _)
    , t_pattern
    , ADefStrategy(child, attr @ Attribute(x_name, sa*, a*), s_body)
    ) ->
    <make-merged-def(|sig-term, t_pattern, child)>
    Def |[
      x_eval(sa* |x_parent, x_all-parents, x_global-cache, x_rewrite-mode, a'*) =
        ?x_node;
        s_pattern;
        ~<add-arg-init> (s_arg-init*, s_body')
    ]|
    with
      x_parent           := <ParentVar>;
      x_node             := <NodeVar>;
      x_all-parents      := <AllParentsVar>;
      x_global-cache     := <GlobalCacheVar>;
      x_rewrite-mode     := <RewriteModeVar>;
      s_pattern          := <assimilate-pattern(|child)> t_pattern;
      x_eval             := <attribute-accessor-name> attr;
      (a'*, s_arg-init*) := <extract-arg-patterns> a*;
      sig-term           := <to-attribute-signature-term> Attribute(x_name, sa*, a'*);
     
      s_parent         := |[ ?x_node; !x_parent; not(UnknownParent)
                             <+ get-parent(|x_all-parents) ]|;
      s_parent-desired := |[ ?x_node < !x_parent + !UnknownParent() ]|;
      
      attribute-signature-wrap(
        !s_body;
        topdown(try(
          assimilate-expr-inside-ag(|s_parent, s_parent-desired)
        ));
        add-eval-failed => s_body'
      | sig-term
      )

  attribute-signature-wrap(s|sig-term) =
    {| CurrentSignatureTerm:
      with(rules(
        CurrentSignatureTerm := sig-term
      ));
      s
    |}

  assimilate-def:
    ADecl(_, _) -> []
  
  assimilate-where-with =
    map(
      ?Where(_)
    + \With(s) -> Strat |[ with'(s) ]|\
    );
    fold-seq

rules // Argument patterns
   
  extract-arg-patterns =
    unzip(extract-arg-pattern-ignore <+ extract-arg-pattern)

  extract-arg-pattern-ignore:
    Var(sig) -> (DefaultVarDec(sig), Id())
    where
      <eq> (<SignatureVar>, sig)
  
  extract-arg-pattern:
    t -> (DefaultVarDec(x_name), |[ !x_name; s_t ]|)
    with
      s_t    := <alltd(match-var-ignore-annos)> t; // don't care about annos
      x_name := <newname> "arg";
      rules(
        MatchingUserParam: x_name -> t
      )
  
  match-var-ignore-annos:
    Var(x) -> |[ ?x <+ eq-ignore-annos(|x) ]|
  
  /**
   * Add argument initialization to an equation body,
   * ensuring that EVAL_FAILED is returned if an argument pattern
   * did not match.
   */
  add-arg-init:
    ([s_arg-init | s_arg-init*], s_body) ->
    |[ s_init-all; // ignore unbound variable
       if s_arg-init then
         s_body'
       else
         s_build-all < !EVAL_FAILED() + fail
       end
    ]|
    where
      <not(Id)> s_arg-init
    with
      s_init-all  := <fold-seq> <collect(\Var(x) -> |[ id < id + ?x ]|\)> s_arg-init;
      s_build-all := <fold-seq> <collect(\Var(x) -> |[ !x ]|\)> s_arg-init;
      s_body'     := <add-arg-init> (s_arg-init*, s_body)
 
  add-arg-init:
    ([Id(), s_arg-init*], s_body) -> <add-arg-init> (s_arg-init*, s_body)
 
  add-arg-init:
    ([], s_body) -> s_body

rules // Semantic rule definition helpers

  attribute-accessor-name =
    attribute-signature => Attribute(name, _, _);
    accessor := <conc-strings> ("eval-", name); // constant name to allow lib. access
    rules(
      UndoAccessorName: accessor -> name
    )

  // TODO: Strategies should always cause "soft" failure, mainly to support stacked decorators

  add-eval-failed =
    oncetd(
      \InlineWhereClause(conditions, s) -> |[ where(s_conditions); (s <+ !EVAL_FAILED()) ]|
       with
         s_conditions := <assimilate-where-with> conditions\
    )
  <+
    \s -> |[ s <+ !EVAL_FAILED() ]|\
  
  assimilate-pattern(|child) =
    ?t_pattern;
    switch !child
      case Root() := t_pattern:
        !|[ where(~<root-pattern>) ]|
      
      case NoChild:
        !|[ where(?t_pattern) ]|
      
      case ?Child(child'):
         // if the attribute is specified on a pattern child, it becomes the current term (x_node)
         <ancestor-pattern(|child')> t_pattern
    end
   
  root-pattern =
    with(
      x_parent      := <ParentVar>;
      x_all-parents := <AllParentsVar>
    );
    !|[ ?root;
        if UnknownParent() := x_parent then
          get-parent(|x_all-parents); NoParent
        else
          <NoParent> x_parent
        end
    ]|
  
  /**
   * Match based on an ancestor (e.g., for def td Foo(Bar(x)).x).
   */
  ancestor-pattern(|x_child):
    t_pattern ->
    |[ ?x_child;
       (!x_parent; not(UnknownParent + NoParent) <+ s_traverse-up);
       s_traverse-up' => t_pattern
    ]|
    with
      x_parent       := <ParentVar>;
      x_all-parents  := <AllParentsVar>;
      depth          := <dec> <term-depth(|Var(x_child))> t_pattern;

      if -1 := depth then // pff.. recover if the child IS the pattern
        s_traverse-up  := Id();
        s_traverse-up' := |[ !x_child ]|
      else
        s_traverse-up  := |[ get-parent(|x_all-parents); not(NoParent) ]|;
        s_traverse-up' := <copy; fold-seq> (depth, s_traverse-up)
      end
    
    // TODO2: Optimize - ancestor-check should use intermediate patterns
