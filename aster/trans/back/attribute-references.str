module back/attribute-references

imports
  Stratego-Attributes
  aster
  back/default-attributes
  back/rule-naming
  back/decorator-references

rules // Evaluate attributes in AG context

  assimilate-expr-inside-ag(|sig, s_parent, s_parent-desired, x_node, x_all-parents, x_attr-cache) =
    assimilate-native-ref-inside-ag(|s_parent, x_all-parents, x_node, x_attr-cache)
  <+
    assimilate-native-ref
  <+
    assimilate-decorator-ref
  <+
    assimilate-attr-ref-inside-ag(|s_parent, s_parent-desired, x_node, x_all-parents, x_attr-cache)
  
  // TODO: Eliminate s_parent-desired param
  assimilate-attr-ref-inside-ag(|s_parent, s_parent-desired, x_node, x_all-parents, x_attr-cache):
    AttributeRef(t, attr @ Attribute(name, s*, t*)) ->
    |[ <x_eval(s* |<s_parent-desired>, x_all-parents, x_attr-cache, x_rewrite-mode, t*)> t ]|
    where
      not(<is-decorator> attr)
    with
      !attr;
      x_eval         := <attribute-accessor-name> attr;
      x_rewrite-mode := <RewriteModeVar>

rules // Evaluate attributes outside of AG context

  assimilate-expr =
    assimilate-native-ref
  <+
    assimilate-attr-ref
  <+
    assimilate-decorator-ref

  // TODO2: Optimize - use local variables to cache all <attr-cache> and <all-parents> calls

  assimilate-attr-ref:
    AttributeRef(t, attr @ Attribute(name, s*, t*)) ->
    Strat |[
      !t;
      aster-initialize-node-ensure(
        aster-initialize-node-warning(|x_all-parents, ~str:name')
      | <all-parents => x_all-parents>
      , <attr-cache => x_attr-cache>
      );
      x_eval(s* |UnknownParent(), x_all-parents, x_attr-cache, <get-rewrite-mode(|x_attr-cache)>, t*)
    ]|
    where
      not(<is-decorator> attr)
    with
      x_eval         := <attribute-accessor-name> attr;
      x_all-parents  := <AllParentsVar>;
      x_attr-cache   := <AttrCacheVar>;
      name'          := name

