/**
 * Automatic rule tracing.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module back/rule-tracing

imports
  libstratego-lib
  back/util
  back/native-attributes
  back/attribute-references
  front/analyze

strategies

  trace-rule =
    trace-rule(|"")
  
  trace-failed-rule =
    trace-rule(|" (failed)")
  
  trace-rule(|comment) =
    where(attribute-signature => Attribute(real-name, _, _));
    
    if <get-config> Trace(); not(<ignore-trace-def> real-name) then
      trace-rule(|comment, real-name)
    else
      !Strat |[ id ]|
    end
  
  trace-rule(|comment, real-name):
    def @ Attribute(name, sarity, tarity) ->
    Strat |[
        say(<conc-strings> (
             ~str:message
           , <aster-node-path(|x_parent, x_all-parents, x_global-cache)>
           , t_comment*
        ))
      ]|
    with
      arity'          := <arity-to-string> (sarity, tarity);
      message         := <conc-strings> ("  [trace] ", real-name, arity', " @ ");
      x_parent        := <ParentVar>;
      x_all-parents   := <AllParentsVar>;
      x_global-cache  := <GlobalCacheVar>;
      t_arg*          := <default-args>;
      
      if "" := comment then
        t_comment* := []
      else
        t_comment* := [Term |[ ~str:comment ]|]
      end
  
  trace-rewrite =
    if <get-config> Trace() then
      !Strat |[
        say(<conc-strings> (
          "  [rewr.] "
        , <aster-node-path(|UnknownParent(), <all-parents>, <global-cache>)> ~id:<NodeVar>
        , " -> "
        , <to-tiny-string>
        ))
      ]|
    else
      !Strat |[ id ]|
    end
