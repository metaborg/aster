module desugar

imports
  libstratego-lib
  Stratego-Attributes
  stratego-rerag

signature constructors
  // used in intermediate syntax
  AttributePDefStrategy : Pattern * OptDotChild * Strategy -> PatternDefBlockDef
  InlineWhereClause     : List(Strategy) * Strategy        -> Strategy
rules

  desugar-all =
    topdown(repeat(
      desugar-attribute-ref
    + desugar-attribute-def
    + desugar-id-term
    + desugar-fail-term
    + desugar-attribute-child
    + desugar-application
    ));
    
    try(
      all-stratego-defs(
        try(astr-flatten-block-def)
      )
    )

rules

  desugar-attribute-def:
    Attributes(def*) -> Rules(def*)

  desugar-attribute-def:
    Decorators(def*) -> Rules(def*)
     
  desugar-attribute-def:
    AttributePDefTerm(pattern, child, term, condition) ->
    AttributePDefStrategy(pattern, child, s)
    with
      s := InlineWhereClause(condition, Build(term))
  
  desugar-attribute-def:
    AttributeDefTerm(child, attribute, term, condition) ->
    AttributeDefStrategy(child, attribute, s)
    with
      s := InlineWhereClause(condition, Build(term))
  
  desugar-attribute-def:
    AttributeDefNoPattern(type, value) ->
    AttributeDef(type, Wld(), value)

rules

  // Desugar Stratego-Sugar a bit for decorator svarss

  desugar-application:
    Strat |[ x ]| -> |[ x(|) ]|

  desugar-application:
    Strat |[ x() ]| -> |[ x(|) ]|

rules

  desugar-attribute-ref:
    AttributeNoArgs(x) -> Attribute(x, [], [])
  
  desugar-attribute-ref:
    AttributeNoTerms(x, s*) -> Attribute(x, s*, [])
  
  desugar-attribute-ref:
    AttributeTerm(x) -> RootApp(x)
  
  desugar-attribute-child:
    DotChild(x) -> Child(x)
  
  desugar-attribute-child:
    DotIdChild() -> IdChild()
  
  desugar-attribute-child:
    IdChild() -> NoChild()
  
  desugar-fail-term:
    FailTerm() -> RootApp(Fail())
  
  desugar-id-term = // match context
    at-match-all(
      \NoAnnoList(IdTerm()) -> Wld()\
    + \IdTerm() -> Wld()\
    )
  
  desugar-id-term: // build context
    NoAnnoList(IdTerm()) -> RootApp(Id())
  
  desugar-id-term: // build context (AnnoList)
    IdTerm() -> RootApp(Id())

  at-match-all(s) =
    ?before;
    at-match(
      rec rec(
        s
      <+
        RootApp(id) <+ App(id, rec)
      <+
        all(rec)
      )
    );
    not(?before)

  at-match(s) =
    Match(s) + NameDefBlock(id, s, id) + RuleNoCond(s, id) + Rule(s, id, id) + AM(id, s) + Assign(s, id)
  + AttributeDefStrategy(id, Attribute(id, id, map(s)), id) + AnonymousRewriteRule(s, id, id)
     
rules // flatten block definitions to individual definitions

  astr-flatten-block-def =
    ?NameDefBlock(type, pattern, <id>);
    map(
      \AttributeDefStrategy(child, attr, s) ->
       AttributeDef(type, pattern, AttributeDefStrategy(child, attr, s))\
    )
  
  astr-flatten-block-def =
    ?PatternDefBlock(type, attribute, <id>);
    map(
      \AttributePDefStrategy(pattern, child, s) ->
       AttributeDef(type, pattern, AttributeDefStrategy(child, attribute, s))\
    )
