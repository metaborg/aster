/**
 * Aster analysis strategies.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module analyze

imports
  libstratego-lib
  Stratego-Attributes
  front/decorator-ordering
  back/assimilate
  front/analyze-foreign-ops

overlays
  PLAIN_DECORATOR              = Decorator("plain", [], [])
  DISABLE_TRACE_DECORATOR      = Decorator("disable-trace", [], [])
  DISABLE_WARNINGS_DECORATOR   = Decorator("disable-warnings", [], [])
  ALTER_SIGNATURE_DECORATOR(s) = Decorator("alter-signature", [s], [])
  CONTEXT_FREE_DECORATOR       = Decorator("context-free", [], [])
  
strategies // Information gathering
  
  analyze =
    ( ?ADef(Type(type, decorators, sort), pattern, ADefStrategy(child, attribute, body))
    + ?ADecl(Type(type, decorators, sort), [attribute])
    );
    with(
      sig            := <attribute-signature> attribute;
      old-decorators := <AttributeDecorators <+ ![]> sig;
      decorators'    := <ordered-union> (decorators, old-decorators);
      
      record-equation-properties(|type, sig);
      
      if !body then
        rules(
          HasEquations: sig
        );
        record-equation-operations(|body, decorators, pattern, child, attribute, sig)
      end;
      
      rules(
        AttributeDecorators: sig -> decorators'
      )
    );
    with(
      analyze-attribute-references(|sig, <!child <+ !None()>)
    )
  
  analyze =
    ?AnonymousRewriteRule(_, _, _);
    rules(
      UsesAnonymousRewriteRules: _
    )
  
  analyze-attribute-references(|sig, child) =
    with(
      sig' := <try(DecoratorSignature)> sig
    );

    topdown(try({ref :
      (Attribute(id, id, id) + Decorator(id, id, id));
      ?ref;
      rules(
        ReferencedAttributes :+ sig  -> ref
        ReferencedAttributes :+ sig' -> ref
      )
    }));
    
    if !child => Child(_) <+ oncetd(Attribute("parent", [], [])) then
      rules(
        ParentAttributeUse: sig  -> sig
        ParentAttributeUse: sig' -> sig
      )
    end;
    
    if oncetd(Attribute("signature" + "attribute-name", [], [])) then
      rules(
        SignatureAttributeUse: sig  -> sig
        SignatureAttributeUse: sig' -> sig
      )
    end
  
  record-equation-properties(|type, sig) =
    switch !type
      case Decorator():
        sig' := <decorator-signature> sig;
        rules(
          IsDecorator: sig
          HasDeclaration: sig
          DecoratorSignature: sig -> sig'
          AttributeDecorators: sig' -> <AttributeDecorators> sig
        )
      case Def():
        rules(
          HasDeclaration: sig
        )
      case Eq():
        id
    end
    
strategies // Information providing
  
  get-attribute-decorators =
    attribute-signature;
    AttributeDecorators

  is-decorator =
    where(
      attribute-signature;
      IsDecorator
    )
  
  /**
   * Checks if an attribute has "foreign" operations, which may
   * require caching and term initialization.
   *
   * @see is-foreign-operation
   */
  has-foreign-operations =
    where(
      attribute-signature;
      HasForeignOperations
    )
  
  /**
   * Find the signature of the first referenced attribute that uses id.parent.
   */
  find-parent-attribute-use:
    attr -> result
    where
      attribute-signature => sig;
      if ParentAttributeUse => cached then
        result := <not(None)> cached
      else
        rules(
          ParentAttributeUse: sig -> None()
        );
        bagof-ReferencedAttributes;
        one(
          where(find-parent-attribute-use);
          attribute-signature => result
        );
        rules(
          ParentAttributeUse: sig -> result
        )
      end 
  
  /**
   * Find the signature of the first referenced attribute that uses id.signature.
   */
  find-signature-attribute-use:
    attr -> result
    where
      attribute-signature => sig;
      if SignatureAttributeUse => cached then
        result := <not(None)> cached
      else
        rules(
          SignatureAttributeUse: sig -> None()
        );
        bagof-ReferencedAttributes;
        one(
          where(find-signature-attribute-use);
          attribute-signature => result
        );
        rules(
          SignatureAttributeUse: sig -> result
        )
      end 
  
  has-plain-decorator =
    has-marker-decorator(|PLAIN_DECORATOR())
  
  has-marker-decorator(|decorator) =
    where(get-marker-decorator(?decorator|decorator))

  get-marker-decorator(match|decorator) =
    match
  <+
    ?node;
    if <HasMarkerDecorator> (decorator, node) => cached then
      <match> cached
    else
      rules(HasMarkerDecorator: (decorator, node) -> None());
      
      get-attribute-decorators;
      getfirst(get-marker-decorator(match|decorator)) => result;
      
      rules(HasMarkerDecorator: (decorator, node) -> result)
    end

  is-native-decorator =
    PLAIN_DECORATOR + DISABLE_TRACE_DECORATOR + DISABLE_WARNINGS_DECORATOR
  + ALTER_SIGNATURE_DECORATOR(id)
    // (context-free is not a built-in)
  
  is-native-decorator =
    \Attribute(x, [a | s*], t*) -> Decorator(x, s*, t*)\;
    is-native-decorator
  
strategies
  
  attribute-signature:
    Attribute(name, s*, a*) ->
    <strip-annos> Attribute(name, <length> s*, <length> a*)

  attribute-signature =
    Attribute(id, is-int, is-int)

  attribute-signature:
    |[ x_eval(sa*|a*) = s ]| -> Attribute(x_eval', sarity, tarity)
    with
      x_eval' := <UndoAccessorName> x_eval;
      sarity  := <length> sa*;
      tarity  := <subt> (<length> a*, DEFAULT_ARG_COUNT())
  
  attribute-signature:
    Decorator(name, s*, a*) -> sig
    where
      fake-sig    := Attribute(name, ["decorated" | s*], a*);
      sig         := <attribute-signature> fake-sig;
      IsDecorator
  
  rename-signature(|name'):
    Attribute(name,  s*, a*) ->
    Attribute(name', s*, a*)

strategies // Helpers for accessing the implementing strategy of a decorator

  // Since decorators are attributes with additional system arguments,
  // they must be renamed to avoid confusion with decorators that have
  // the same declared signature.

  decorator-signature =
    attribute-signature;
    Attribute(decorator-accessor-name, <add> (DECORATOR_SARG_COUNT(), <id>), <add> (DECORATOR_TARG_COUNT(), <id>))
  
  decorator-accessor-name =
    DecoratorAccessorName
  <+
    ?attr-name;
    accessor := <newname> <conc-strings> (attr-name, "-decorator");
    rules(
      DecoratorAccessorName: attr-name -> accessor
      IsDecoratorAccessorName: accessor
    )
