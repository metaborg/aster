/**
 * Aster analysis strategies.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module analyze

imports
  libstratego-lib
  Stratego-Attributes
  front/decorator-ordering
  back/assimilate
  front/analyze-foreign-ops

overlays
  PLAIN_DECORATOR            = Decorator("plain", [], [])
  DISABLE_TRACE_DECORATOR    = Decorator("disable-trace", [], [])
  DISABLE_WARNINGS_DECORATOR = Decorator("disable-warnings", [], [])

strategies

  // TODO2: Inspect decorators to tell if they are "marker" decorators?
  is-marker-decorator =
    PLAIN_DECORATOR + DISABLE_TRACE_DECORATOR + DISABLE_WARNINGS_DECORATOR
  
strategies // Information gathering
  
  analyze =
    ( ?ADef(Type(type, decorators, sort), pattern, ADefStrategy(child, attribute, body))
    + ?ADecl(Type(type, decorators, sort), [attribute])
    );
    with(
      sig            := <attribute-signature> attribute;
      old-decorators := <AttributeDecorators <+ ![]> sig;
      decorators'    := <ordered-union> (decorators, old-decorators);
      
      record-equation-properties(|type, sig);
      
      if !body then
        rules(
          HasEquations: sig
        );
        record-equation-operations(|body, pattern, child, attribute, sig)
      end;
      
      rules(
        AttributeDecorators: sig -> decorators'
      )
    )
  
  analyze =
    ?AnonymousRewriteRule(_, _, _);
    rules(
      UsesAnonymousRewriteRules: _
    )
  
  record-equation-properties(|type, sig) =
    switch !type
      case Decorator():
        sig' := <decorator-signature> sig;
        rules(
          IsDecorator: sig
          HasDeclaration: sig
          AttributeDecorators: sig' -> <AttributeDecorators> sig
        )
      case Def():
        rules(
          HasDeclaration: sig
        )
      case Eq():
        id
    end
    
strategies // Information providing
  
  get-attribute-decorators =
    attribute-signature;
    AttributeDecorators

  is-decorator =
    where(
      attribute-signature;
      IsDecorator
    )
  
  /**
   * Checks if an attribute has "foreign" operations, which may
   * require caching and term initialization.
   *
   * @see is-foreign-operation
   */
  has-foreign-operations =
    where(
      attribute-signature;
      HasForeignOperations
    )
  
  has-plain-decorator =
    has-marker-decorator(|PLAIN_DECORATOR())

  has-marker-decorator(|decorator) =
    where(
      ?decorator
    <+
      if <HasMarkerDecorator> (decorator, <id>) => cached then
        1 := cached
      else
        ?node;
        rules(HasMarkerDecorator: (decorator, node) -> 0);
        
        get-attribute-decorators;
        fetch(has-marker-decorator(|decorator));
        
        rules(HasMarkerDecorator: (decorator, node) -> 1)
      end
    )
  
  // TODO: Explicit constructors / tuples for attribute signatures
  
  attribute-signature:
    Attribute(name, s*, a*) ->
    <strip-annos> Attribute(name, <length> s*, <length> a*)

  attribute-signature =
    Attribute(id, is-int, is-int)

  attribute-signature:
    |[ x_eval(sa*|a*) = s ]| -> Attribute(x_eval', sarity, tarity)
    with
      x_eval' := <UndoAccessorName> x_eval;
      sarity  := <length> sa*;
      tarity  := <subt> (<length> a*, DEFAULT_ARG_COUNT())
  
  attribute-signature:
    Decorator(name, s*, a*) -> sig
    where
      fake-sig    := Attribute(name, ["decorated" | s*], a*);
      sig         := <attribute-signature> fake-sig;
      IsDecorator
  
  rename-signature(|name'):
    Attribute(name,  s*, a*) ->
    Attribute(name', s*, a*)

strategies // Helpers for accessing the implementing strategy of a decorator

  // Since decorators are attributes with additional system arguments,
  // they must be renamed to avoid confusion with decorators that have
  // the same declared signature.

  decorator-signature =
    attribute-signature;
    Attribute(decorator-accessor-name, <add> (DECORATOR_SARG_COUNT(), <id>), <add> (DECORATOR_TARG_COUNT(), <id>))
  
  decorator-accessor-name =
    DecoratorAccessorName
  <+
    ?attr-name;
    accessor := <newname> <conc-strings> (attr-name, "-decorator");
    rules(
      DecoratorAccessorName: attr-name -> accessor
      IsDecoratorAccessorName: accessor
    )
