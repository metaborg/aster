module analyze

imports
  libstratego-lib
  Stratego-Attributes
  back/assimilate
  back/rule-naming

strategies // Analysis
  
  analyze =
    ( ?AttributeDef(Type(type, decorators, sort), _, AttributeDefStrategy(_, attribute, _))
    + ?AttributeDecl(Type(type, decorators, sort), [attribute])
    );
    with(
      sig            := <attribute-signature> attribute;
      old-decorators := <AttributeDecorators <+ ![]> sig;
      decorators'    := <unify-decorators> (decorators, old-decorators);
      
      switch !type
        case Decorator():
          sig' := <decorator-signature> sig;
          rules(
            IsDecorator: sig
            HasDeclaration: sig
            AttributeDecorators: sig' -> <AttributeDecorators> sig
          )
        case Def():
          rules(
            HasDeclaration: sig
          )
        case Eq():
          id
      end;
      rules(
        AttributeDecorators: sig -> decorators'
      )
    )
  
  analyze =
    ?AnonymousRewriteRule(_, _, _);
    rules(
      UsesAnonymousRewriteRules: _
    )
  
  unify-decorators =
    union // TODO: Smart decorator unification
    
strategies // Providing information
  
  get-attribute-decorators =
    attribute-signature;
    AttributeDecorators

  is-decorator =
    where(
      attribute-signature;
      IsDecorator
    )

  // HACK: work-around to get def plain attributes for now
  is-plain-decorator =
    where(
      get-attribute-decorators;
      fetch(Decorator("plain", [], []))
    )
  
  // TODO: Explicit constructors / tuples for attribute signatures
  
  attribute-signature:
    Attribute(name, s*, a*) ->
    <strip-annos> Attribute(name, <length> s*, <length> a*)

  attribute-signature =
    Attribute(id, is-int, is-int)

  attribute-signature:
    |[ x_eval(sa*|a*) = s ]| -> Attribute(x_eval', sarity, tarity)
    with
      sarity  := <length> sa*;
      tarity  := <subt> (<length> a*, DEFAULT_ARG_COUNT());
      x_eval' := <try(UndoAccessorName)> x_eval
  
  attribute-signature:
    Decorator(name, s*, a*) -> sig
    where
      sig := <attribute-signature> Attribute(name, [(), s*], a*);
      IsDecorator
  
  rename-signature(|name'):
    Attribute(name,  s*, a*) ->
    Attribute(name', s*, a*)

strategies // Helpers for accessing the implementing strategy of a decorator

  // Since decorators are attributes with additional system arguments,
  // they must be renamed to avoid confusion with decorators that have
  // the same declared signature.

  decorator-signature =
    attribute-signature;
    Attribute(decorator-internal-name, <add> (DECORATOR_ARG_COUNT(), <id>), id)
  
  decorator-internal-name =
    DecoratorInternalName
  <+
    ?attr-name;
    internal := <newname> <conc-strings> (attr-name, "-decorator");
    rules(
      DecoratorInternalName: attr-name -> internal
    )
