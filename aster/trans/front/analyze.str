module analyze

imports
  libstratego-lib
  Stratego-Attributes
  back/assimilate
  back/rule-naming

strategies // Analysis

  analyze =
    ( ?AttributeDef(type, decorators, AttributeDefStrategy(_, attribute, s))
    + ?AttributeDecl(decorators, attribute) => is-decorator
    + ?DecoratorDef(type, decorators, AttributeDefStrategy(_, attribute, s))
    );
    with(
      sig     := <attribute-signature> attribute;
      oldtype := <!sig; AttributeType <+ !type>;
      type'   := <unify-attribute-type> (type, oldtype);

      if Circular(value) := circular then
        rules(
          AttributeCircular: sig -> value
        )
      end;
      
      if !is-decorator then
        rules(
          IsDecorator: sig
        )
      end;
      
      rules(
        AttributeType: sig -> type'
      )
    )
  
  analyze =
    ?AnonymousRewriteRule(_, _, _);
    rules(
      UsesAnonymousRewriteRules: _
    )
  
  unify-attribute-type =
    \(t, t) -> t\
  <+
    \(Decorated(t), _) -> Decorated(t)\
  <+
    \(_, Decorated(t)) -> Decorated(t)\
  <+
    \(Local(), _) -> Local()\
  <+
    \(_, Local()) -> Local()\
  <+
    \(t, NoType()) -> t\
  <+
    \(NoType(), t) -> t\
  <+
    !Chained()
    
strategies // Providing information
  
  get-attribute-type =
    attribute-signature;
    AttributeType
  
  get-attribute-circular =
    attribute-signature;
    AttributeCircular
  
  // TODO: Explicit constructors / tuples for attribute signatures
  
  attribute-signature:
    Attribute(name, s*, a*) ->
    <strip-annos> Attribute(name, <length> s*, <length> a*)

  attribute-signature =
    Attribute(id, is-int, is-int)

  attribute-signature:
    |[ x_eval(sa*|a*) = s ]| -> Attribute(x_eval', sarity, tarity)
    with
      sarity  := <length> sa*;
      tarity  := <subt> (<length> a*, DEFAULT_ARG_COUNT());
      x_eval' := <try(UndoAccessorName)> x_eval
  
  rename-signature(|name'):
    Attribute(name,  s*, a*) ->
    Attribute(name', s*, a*)
