module io

imports
  libstratego-lib
  libstratego-sglr
  libstratego-xtc // TODO2: XTC detox
  libstrc

strategies
  
  // We parse individual files using libstrc.
  // Using pack-stratego isn't really an option as long as
  // we want to support both .str/.rtree and .astr files
  
  // TODO: -I option for parse tables
  
  input-stratego-file =
    xtc-ensure-file => FILE(file);
    scope-whoami(
      parse-stratego-trm(
      | [ "-i", file
        , "--default-syntax", "Stratego-Attributes"
        , "-I", <xtc-find; dirname <+ !"../syntax"> "Stratego-Attributes.tbl"
        , "-I", <xtc-find; dirname <+ !"../runtime"> "aster-runtime.str"
        ]
      )
    )
  
  scope-whoami(s) =
    with(<get-config> "program" => whoami);
    finally(
      s
    , <set-config> ("program", whoami)
    )

  output-stratego-file =
    write-to;
    xtc-transform(!"pp-stratego", !["--abstract" | <pass-verbose>])
  <+
    pp-format-checker-error(|"Internal error: generated AST is malformed", "Stratego-Sugar.rtg")

   pp-format-checker-error(|msg, rtg) =
      err-msg(|msg)
    ; write-to => FILE(file)
    ; try(<xtc-command(!"format-check")> ["--vis", "-i", file, "--rtg", <xtc-find> rtg])
    ; log(|Critical(), "Fatal errors encountered in generated code")
    ; <xtc-exit> 1
  
  parse-table-stratego-attributes =
    CachedParseTableStrategoAttributes
  <+
    table := <open-parse-table> <import-term(Stratego-Attributes.tbl)>;
    rules(CachedParseTableStrategoAttributes := table)
