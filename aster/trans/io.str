module io

imports
  libstratego-lib
  libstratego-sglr
  libstratego-xtc  // TODO2: XTC detox
  libstrc

strategies
   
  // We parse individual files using libstrc.
  // Using pack-stratego as is isn't really an option as long as
  // we want to support both .str/.rtree and .astr files
  
  input-stratego-file =
    xtc-ensure-file => FILE(file);
    parse-stratego-trm( // TODO: if-java-platform(import-term)
    | [ "-i", file
      , "--default-syntax", "Stratego-Attributes"
      , "-I", <stratego-attributes-table-path>
      , "-I", <stratego-attributes-in-stratego-table-path>
      , "-I", <aster-runtime-path>
      | <get-config <+ ![]> "-I"
      ]
    )
  
  stratego-attributes-table-path =
    if-c-platform(
      <xtc-find; dirname> "Stratego-Attributes.tbl"
    <+
      !"../syntax" // bootstrapping: before install
    );
    if-java-platform(
      TablePath
    <+
      path := <new-temp-dir>;
      rules(TablePath := path);
      with(<WriteToBinaryFile> ($[[path]/Stratego-Attributes.tbl], <import-term(Stratego-Attributes.tbl)>))
    )
  
  stratego-attributes-in-stratego-table-path =
    if-c-platform(
      <xtc-find; dirname> "Stratego-Attributes-in-Stratego.tbl"
    );
    if-java-platform(
      MetaTablePath
    <+
      path := <new-temp-dir>;
      rules(MetaTablePath := path);
      with(<WriteToBinaryFile> ($[[path]/Stratego-Attributes-in-Stratego.tbl], <import-term(Stratego-Attributes-in-Stratego.tbl)>))
    )
  
  aster-runtime-path =
    if-c-platform(
      <xtc-find; dirname> "aster-runtime.rtree"
    <+
      !"../runtime" // bootstrapping: before install
    );
    if-java-platform(
      RuntimePath
    <+
      path := <new-temp-dir>;
      rules(RuntimePath := path);
      with(<WriteToBinaryFile> ($[[path]/aster-runtime.rtree], <import-term(aster-runtime.rtree)>))
    )

  output-stratego-file =
    with(
      file   := <xtc-new-file>
    ; stream := <open-stream> (file, "w")
    );
    finally(
      pp-stratego-stream(|stream), <fclose> stream
    )
  <+
    pp-format-checker-error(|"Internal error: generated AST is malformed", "Stratego-Sugar.rtg")

   pp-format-checker-error(|msg, rtg) =
      err-msg(|msg)
    ; write-to => FILE(file)
    ; try(<xtc-command(!"format-check")> ["--vis", "-i", file, "--rtg", <xtc-find> rtg])
    ; log(|Critical(), "Fatal errors encountered in generated code")
    ; <xtc-exit> 1
  
  parse-table-stratego-attributes =
    CachedParseTableStrategoAttributes
  <+
    table := <open-parse-table> <import-term(Stratego-Attributes.tbl)>;
    rules(CachedParseTableStrategoAttributes := table)
