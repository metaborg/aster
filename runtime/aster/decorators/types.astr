/**
 * Type decorators: annotate attributes with type assertions.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module aster/decorators/types

imports
  libstratego-lib
  aster/decorators/common
  aster/decorators/assert
    
signature constructors

  List : Term -> List

strategies

  String = is-string
  
  Int = is-int
  
  Real = is-real
  
  List = is-list
  
  Set = id.make-set

decorators // Type annotations and assertions

  /**
   * Decorates an attribute with its output type.
   * An error will be reported if the attribute is not of this type.
   *
   * Example:
   *
   * def Type(String) add-suffix :
   *   s -> <concat-strings> (s, "_", s.suffix)
   */
  decorator Type(a, tout) =
    id.assert-output(a, id.has-Type(tout) |"Attribute result is not of the indicated type")

  /**
   * Decorates an attribute with its input and output type.
   * An error will be reported if the attribute is not of these types.
   *
   * Examples:
   *
   * def Type(String, String) add-suffix :
   *   s -> <concat-strings> (s, "_", s.suffix)
   *
   * def Type(id,     String) add-suffix :
   *   s -> <concat-strings> (s, "_", s.suffix)
   */
  decorator Type(a, tin, tout) =
    id.assert-input(
      id.assert-output(
        a
      , id.has-Type(tout)
      |"Attribute result is not of the indicated type"
      )
    , id.has-Type(tin)
    | "Attribute input is not of the indicated type"
    )
  
  /**
   * Decorates an attribute with the String output type.
   * An error will be reported if the attribute is not of this type.
   *
   * Example:
   *
   * def String add-suffix :
   *   s -> <concat-strings> (s, "_", s.suffix)
   */
  decorator String(a) =
    id.assert-output(a, String |"Result must be a string")

  decorator List(a) =
    id.assert-output(a, List |"Result must be a list")

  decorator List(a, t) =
    id.assert-output(
      a
    , list-loop(id.has-Type(t))
    | "Result must be a list of the indicated type"
    )

  /**
   * Annotates that the attribute should result in a list,
   * and ensures that all elements are unique
   * (disregarding the tree location of the items).
   */
  decorator Set(a) =
    id.assert-output(a, id.make-set |"Result must be a list or set")

  /**
   * Annotates that the attribute should result in a list,
   * and ensures that all elements are unique
   * (disregarding the tree location of the items).
   *
   * Also performs a type test 't' on all elements.
   */
  decorator Set(a, t) =
    id.assert-output(
      a
    , id.make-set; list-loop(id.has-Type(t))
    | "Result must be a list or set of the indicated type"
    )

  decorator Int(a) =
    id.assert-output(a, is-int |"Result must be an int")

  /**
   * Indicates that an attribute is only used to test for a certain property.
   */
  decorator Test(a) =
    where(a)
  
  /**
   * Terminate with a fatal error if the decorated attribute results in a hard failure.
   */
  decorator fail-fatal(a) =
    id.assert-input(a, a.defined |"No attribute equation matches for input")

attributes // Type test helper

  /**
   * @internal
   */
  def plain has-Type(t) =
    where(t)
  <+
    list-loop(<t> List(<id>))
