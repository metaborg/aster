/**
 * Aster language primitives as attributes.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module aster/attributes/internal

imports
  libstratego-lib
  aster/lang/-

attributes // Term initialization/uninitialization

  /**
   * Initialize a term for attribution, even if it was initialized before.
   */
  def plain disable-warnings init =
    aster-initialize-node(|<all-parents>, <global-cache>)

  /**
   * (Re-)initialize a term for attribution, even if it was initialized before.
   */
  def plain disable-warnings reinit =
    id.init

  /**
   * Ensure a term is initialized for attribution.
   */
  def plain disable-warnings ensure-init =
    aster-init-node-ensure(|<all-parents>, <global-cache>)

  /**
   * Unititialize an term, removing any initialization annotations.
   */
  def plain disable-warnings uninit =
    aster-remove-annos
  
  /**
   * Unititialize an term, removing any initialization annotations.
   * May only consider annotations in leaf nodes.
   *
   * @internal
   */
  def plain disable-warnings uninit-lazy =
    aster-remove-annos-from-leaves(|<all-parents>)
  
  def plain disable-warnings is-inited =
    aster-is-initialized(|<all-parents>)

attributes // Internal tables
  
  def plain disable-warnings all-parents =
    all-parents
  
  def plain disable-warnings global-cache =
    global-cache

attributes // Caching

  /**
   * Retrieves the cached value for a given attribute signature,
   * or fails if it failed before.
   */
  def plain disable-trace get-cached(|sig) =
    get-cached-attribute(|<global-cache>, id, sig)

  /**
   * Assigns the cached value for a given attribute signature.
   */
  def plain disable-trace set-cached(|sig, value) =
    set-cached-attribute(|<global-cache>, id, sig, value)
  
  /**
   * Tests if there exists a cached value for a given attribute signature.
   */
  def plain disable-trace is-cached(|sig) =
    where(get-cached-attribute(|<global-cache>, id, sig))

  /**
   * Assigns the current term as the cached value for a given attribute signature.
   */
  def plain disable-trace set-cached-for(|sig, node) =
    set-cached-attribute(|<global-cache>, node, sig, id)
    
  /**
   * Retrieves the cached value for a given attribute,
   * or fails if it failed before.
   *
   * @note Intended to be used as a regular attribute, not for decoration.
   */
  decorator plain disable-trace get-cached(a) =
    get-cached-attribute(|<global-cache>, id, a.signature)
    
  /**
   * Tests if there exists a cached value for a given attribute.
   *
   * @note Intended to be used as a regular attribute, not for decoration.
   */
  decorator plain disable-trace is-cached(a) =
    where(get-cached-attribute(|<global-cache>, id, a.signature))
  
  /**
   * Assigns the cached value for a given attribute.
   *
   * @note Intended to be used as a regular attribute, not for decoration.
   */
  decorator plain disable-trace set-cached(a|value) =
    set-cached-attribute(|<global-cache>, id, a.signature, value)
  
  /**
   * Assigns the current term as the cached value for a given attribute.
   *
   * @note Intended to be used as a regular attribute, not for decoration.
   */
  decorator plain disable-trace set-cached-for(a|node) =
    set-cached-attribute(|<global-cache>, node, a.signature, id)

